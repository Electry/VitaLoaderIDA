int sceAVConfigGetDisplayMaxBrightness(int *maxBrightness);
int sceAVConfigGetShutterVol(int *volume);
int sceAVConfigGetSystemVol(int *volume);
int sceAVConfigMuteOn(void);
int sceAVConfigSetDisplayBrightness(int brightness);
int sceAVConfigSetSystemVol(int volume);
int _sceAppMgrGetRawPath(char *path, char *resolved_path, int resolved_path_size, char unk[16]);
int _sceAppMgrGetRawPathOfApp0ByAppIdForShell(int appId, char resolved_path[292]);
int _sceAppMgrSaveDataDataRemove(SceAppMgrSaveDataDataDelete*data);
int _sceAppMgrSaveDataDataSave(SceAppMgrSaveDataData*data);
int _sceAppMgrSaveDataSlotCreate(SceAppMgrSaveDataSlot*data);
int _sceAppMgrSaveDataSlotDelete(SceAppMgrSaveDataSlotDelete*data);
int _sceAppMgrSaveDataSlotGetParam(SceAppMgrSaveDataSlot*data);
int _sceAppMgrSaveDataSlotSetParam(SceAppMgrSaveDataSlot*data);
int sceAppMgrAcquireBgmPort(void);
int sceAppMgrDestroyAppByAppId(SceUID appId);
int sceAppMgrDestroyOtherApp(void);
SceUID sceAppMgrGetProcessIdByAppIdForShell(SceUID appId);
int sceAppMgrReleaseBgmPort(void);
int sceAppMgrSetInfobarState(SceAppMgrInfoBarVisibility visibility, SceAppMgrInfoBarColor color, SceAppMgrInfoBarTransparency transparency);
int _sceAppMgrGetAppState(SceAppMgrAppState *appState, uint32_t len, uint32_t version);
int sceAppMgrAppDataMount(int id, const char *mount_point);
int sceAppMgrAppDataMountById(int id, const char *titleid, const char *mount_point);
int sceAppMgrAppParamGetString(int pid, int param, char *string, int length);
int sceAppMgrConvertVs0UserDrivePath(char *path, char *mount_point, int unk);
int sceAppMgrDestroyAppByName(const char *name);
int sceAppMgrGameDataMount(const char *path, int unk1, int unk2, const char *mount_point);
int sceAppMgrGetAppParam(char *param);
int sceAppMgrGetDevInfo(const char *dev, uint64_t *max_size, uint64_t *free_size);
int sceAppMgrGetIdByName(SceUID *pid, const char *name);
int sceAppMgrGetNameById(SceUID pid, char *name);
int sceAppMgrGetRawPath(char *path, char *mount_point, char *unk);
int sceAppMgrGetRunningAppIdListForShell(SceUID *appIds, int count);
int sceAppMgrLaunchAppByName2(const char *name, const char *param, SceAppMgrLaunchAppOptParam *optParam);
SceUID sceAppMgrLaunchAppByName2ForShell(const char *name, const char *param, SceAppMgrLaunchAppOptParam *optParam);
int sceAppMgrLaunchAppByUri(int flags, const char *uri);
int sceAppMgrLoadExec(const char *appPath, char *const argv[], const SceAppMgrExecOptParam *optParam);
int sceAppMgrMmsMount(int id, const char *mount_point);
int sceAppMgrPspSaveDataRootMount(const char *mount_point);
int sceAppMgrReceiveSystemEvent(SceAppMgrSystemEvent *systemEvent);
int sceAppMgrUmount(const char *mount_point);
int sceAppMgrWorkDirMount(int id, const char *mount_point);
int sceAppMgrWorkDirMountById(int id, const char *titleid, const char *mount_point);
int sceAppUtilAppEventParseLiveArea(const SceAppUtilAppEventParam *eventParam, char *buffer);
int sceAppUtilAppParamGetInt(SceAppUtilAppParamId paramId, int *value);
int sceAppUtilBgdlGetStatus(SceAppUtilBgdlStatus *stat);
int sceAppUtilInit(SceAppUtilInitParam *initParam, SceAppUtilBootParam *bootParam);
int sceAppUtilLaunchWebBrowser(SceAppUtilWebBrowserParam *param);
int sceAppUtilLoadSafeMemory(void *buf, SceSize bufSize, SceOff offset);
int sceAppUtilMusicMount();
int sceAppUtilMusicUmount();
int sceAppUtilPhotoMount();
int sceAppUtilPhotoUmount();
int sceAppUtilReceiveAppEvent(SceAppUtilAppEventParam *eventParam);
int sceAppUtilSaveDataDataRemove(SceAppUtilSaveDataFileSlot *slot, SceAppUtilSaveDataRemoveItem *files, unsigned int fileNum, SceAppUtilSaveDataMountPoint *mountPoint);
int sceAppUtilSaveDataDataSave(SceAppUtilSaveDataFileSlot *slot, SceAppUtilSaveDataFile *files, unsigned int fileNum, SceAppUtilSaveDataMountPoint *mountPoint, SceSize *requiredSizeKB);
int sceAppUtilSaveDataSlotCreate(unsigned int slotId, SceAppUtilSaveDataSlotParam *param, SceAppUtilSaveDataMountPoint *mountPoint);
int sceAppUtilSaveDataSlotDelete(unsigned int slotId, SceAppUtilSaveDataMountPoint *mountPoint);
int sceAppUtilSaveDataSlotGetParam(unsigned int slotId, SceAppUtilSaveDataSlotParam *param, SceAppUtilSaveDataMountPoint *mountPoint);
int sceAppUtilSaveDataSlotSetParam(unsigned int slotId, SceAppUtilSaveDataSlotParam *param, SceAppUtilSaveDataMountPoint *mountPoint);
int sceAppUtilSaveSafeMemory(void *buf, SceSize bufSize, SceOff offset);
int sceAppUtilShutdown();
int sceAppUtilStoreBrowse(SceAppUtilStoreBrowseParam *param);
int sceAppUtilSystemParamGetInt(unsigned int paramId, int *value);
int sceAppUtilSystemParamGetString(unsigned int paramId, SceChar8 *buf, SceSize bufSize);
int sceAtracAddStreamData(int atracHandle, SceUInt32 addSize);
int sceAtracCreateDecoderGroup(SceUInt32 atracType, const SceAtracDecoderGroup *pDecoderGroup, void *pvWorkMem, int initAudiodecFlag);
int sceAtracDecode(int atracHandle, void *pOutputBuffer, SceUInt32 *pOutputSamples, SceUInt32 *pDecoderStatus);
int sceAtracDeleteDecoderGroup(SceUInt32 atracType, int termAudiodecFlag);
int sceAtracGetContentInfo(int atracHandle, SceAtracContentInfo *pContentInfo);
int sceAtracGetDecoderGroupInfo(SceUInt32 atracType, SceAtracDecoderGroup *pCreatedDecoder, SceAtracDecoderGroup *pAvailableDecoder);
int sceAtracGetDecoderStatus(int atracHandle, SceUInt32 *pDecoderStatus);
int sceAtracGetInternalError(int atracHandle, int *pInternalError);
int sceAtracGetLoopInfo(int atracHandle, int *pLoopNum, SceUInt32 *pLoopStatus);
int sceAtracGetNextOutputPosition(int atracHandle, SceUInt32 *pNextOutputSample);
int sceAtracGetOutputSamples(int atracHandle, SceUInt32 *pOutputSamples);
int sceAtracGetOutputableSamples(int atracHandle, SceLong64 *pOutputableSamples);
int sceAtracGetRemainSamples(int atracHandle, SceLong64 *pRemainSamples);
int sceAtracGetStreamInfo(int atracHandle, SceAtracStreamInfo *pStreamInfo);
int sceAtracGetSubBufferInfo(int atracHandle, SceUInt32 *pReadPosition, SceUInt32 *pMinSubBufferSize, SceUInt32 *pDataSize);
int sceAtracGetVacantSize(int atracHandle, SceUInt32 *pVacantSize);
int sceAtracIsSubBufferNeeded(int atracHandle);
int sceAtracQueryDecoderGroupMemSize(SceUInt32 atracType, const SceAtracDecoderGroup *pDecoderGroup);
int sceAtracReleaseHandle(int atracHandle);
int sceAtracResetNextOutputPosition(int atracHandle, SceUInt32 resetSample);
int sceAtracSetDataAndAcquireHandle(SceUChar8 *pucBuffer, SceUInt32 uiReadSize, SceUInt32 uiBufferSize);
int sceAtracSetLoopNum(int atracHandle, int loopNum);
int sceAtracSetOutputSamples(int atracHandle, SceUInt32 outputSamples);
int sceAtracSetSubBuffer(int atracHandle, SceUChar8 *pSubBuffer, SceUInt32 subBufferSize);
int sceAudioOutGetAdopt(SceAudioOutPortType type);
int sceAudioOutGetConfig(int port, SceAudioOutConfigType type);
int sceAudioOutGetRestSample(int port);
int sceAudioOutOpenPort(SceAudioOutPortType type, int len, int freq, SceAudioOutMode mode);
int sceAudioOutOutput(int port, const void *buf);
int sceAudioOutReleasePort(int port);
int sceAudioOutSetAlcMode(SceAudioOutAlcMode mode);
int sceAudioOutSetConfig(int port, int len, int freq, SceAudioOutMode mode);
int sceAudioOutSetVolume(int port, SceAudioOutChannelFlag ch, int *vol);
int sceAudioInGetAdopt(SceAudioInPortType portType);
int sceAudioInGetStatus(int select);
int sceAudioInInput(int port, void *destPtr);
int sceAudioInOpenPort(SceAudioInPortType portType, int grain, int freq, SceAudioInParam param);
int sceAudioInReleasePort(int port);
extern SceInt32 sceAudiodecClearContext(SceAudiodecCtrl *pCtrl);
extern SceInt32 sceAudiodecCreateDecoder(SceAudiodecCtrl *pCtrl, SceUInt32 codecType);
extern SceInt32 sceAudiodecCreateDecoderExternal(SceAudiodecCtrl *pCtrl, SceUInt32 codecType, SceUIntVAddr vaContext, SceUInt32 contextSize);
extern SceInt32 sceAudiodecDecode(SceAudiodecCtrl *pCtrl);
extern SceInt32 sceAudiodecDecodeNFrames(SceAudiodecCtrl *pCtrl, SceUInt32 nFrames);
extern SceInt32 sceAudiodecDecodeNStreams(SceAudiodecCtrl *pCtrls[], SceUInt32 nStreams);
extern SceInt32 sceAudiodecDeleteDecoder(SceAudiodecCtrl *pCtrl);
extern SceInt32 sceAudiodecDeleteDecoderExternal(SceAudiodecCtrl *pCtrl, SceUIntVAddr *pvaContext);
extern SceInt32 sceAudiodecGetContextSize(SceAudiodecCtrl *pCtrl, SceUInt32 codecType);
extern SceInt32 sceAudiodecGetInternalError(SceAudiodecCtrl *pCtrl, SceInt32 *pInternalError);
extern SceInt32 sceAudiodecInitLibrary(SceUInt32 codecType, SceAudiodecInitParam *pInitParam);
extern SceInt32 sceAudiodecTermLibrary(SceUInt32 codecType);
int sceAudioencClearContext(SceAudioencCtrl *pCtrl);
int sceAudioencCreateEncoder(SceAudioencCtrl *pCtrl, int codecType);
int sceAudioencDeleteEncoder(SceAudioencCtrl *pCtrl);
int sceAudioencEncode(SceAudioencCtrl *pCtrl);
int sceAudioencGetInternalError(SceAudioencCtrl *pCtrl, int *pInternalError);
int sceAudioencGetOptInfo(SceAudioencCtrl *pCtrl);
int sceAudioencInitLibrary(int codecType, SceAudioencInitParam *pInitParam);
int sceAudioencTermLibrary(unsigned int codecType);
int sceCameraClose(int devnum);
int sceCameraGetAntiFlicker(int devnum, int *pMode);
int sceCameraGetAutoControlHold(int devnum, int *pMode);
int sceCameraGetBacklight(int devnum, int *pMode);
int sceCameraGetBrightness(int devnum, int *pLevel);
int sceCameraGetContrast(int devnum, int *pLevel);
int sceCameraGetDeviceLocation(int devnum, SceFVector3 *pLocation);
int sceCameraGetEV(int devnum, int *pLevel);
int sceCameraGetEffect(int devnum, int *pMode);
int sceCameraGetExposureCeiling(int devnum, int *pMode);
int sceCameraGetGain(int devnum, int *pMode);
int sceCameraGetISO(int devnum, int *pMode);
int sceCameraGetNightmode(int devnum, int *pMode);
int sceCameraGetReverse(int devnum, int *pMode);
int sceCameraGetSaturation(int devnum, int *pLevel);
int sceCameraGetSharpness(int devnum, int *pLevel);
int sceCameraGetWhiteBalance(int devnum, int *pMode);
int sceCameraGetZoom(int devnum, int *pLevel);
int sceCameraIsActive(int devnum);
int sceCameraOpen(int devnum, SceCameraInfo *pInfo);
int sceCameraRead(int devnum, SceCameraRead *pRead);
int sceCameraSetAntiFlicker(int devnum, int mode);
int sceCameraSetAutoControlHold(int devnum, int mode);
int sceCameraSetBacklight(int devnum, int mode);
int sceCameraSetBrightness(int devnum, int level);
int sceCameraSetContrast(int devnum, int level);
int sceCameraSetEV(int devnum, int level);
int sceCameraSetEffect(int devnum, int mode);
int sceCameraSetExposureCeiling(int devnum, int mode);
int sceCameraSetGain(int devnum, int mode);
int sceCameraSetISO(int devnum, int mode);
int sceCameraSetNightmode(int devnum, int mode);
int sceCameraSetReverse(int devnum, int mode);
int sceCameraSetSaturation(int devnum, int level);
int sceCameraSetSharpness(int devnum, int level);
int sceCameraSetWhiteBalance(int devnum, int mode);
int sceCameraSetZoom(int devnum, int level);
int sceCameraStart(int devnum);
int sceCameraStop(int devnum);
int sceCommonDialogSetConfigParam(const SceCommonDialogConfigParam *configParam);
int sceCommonDialogUpdate(const SceCommonDialogUpdateParam *updateParam);
SceInt32 sceImeDialogAbort( void );
SceInt32 sceImeDialogGetResult( SceImeDialogResult*result );
SceCommonDialogStatus sceImeDialogGetStatus( void );
SceInt32 sceImeDialogInit( const SceImeDialogParam *param );
SceInt32 sceImeDialogTerm( void );
int sceMsgDialogAbort(void);
int sceMsgDialogClose(void);
int sceMsgDialogGetResult(SceMsgDialogResult *result);
SceCommonDialogStatus sceMsgDialogGetStatus(void);
int sceMsgDialogInit(const SceMsgDialogParam *param);
int sceMsgDialogProgressBarInc( SceMsgDialogProgressBarTarget target, SceUInt32 delta );
int sceMsgDialogProgressBarSetMsg( SceMsgDialogProgressBarTarget target, const SceChar8 *barMsg );
int sceMsgDialogProgressBarSetValue( SceMsgDialogProgressBarTarget target, SceUInt32 rate );
int sceMsgDialogTerm(void);
SceInt32 sceNetCheckDialogAbort(void);
SceInt32 sceNetCheckDialogGetPS3ConnectInfo(SceNetCheckDialogPS3ConnectInfo *info);
SceInt32 sceNetCheckDialogGetResult(SceNetCheckDialogResult *result);
SceCommonDialogStatus sceNetCheckDialogGetStatus(void);
SceInt32 sceNetCheckDialogInit(SceNetCheckDialogParam *param);
SceInt32 sceNetCheckDialogTerm(void);
int sceCompatAllocCdramWithHole(SceCompatCdram *cdram);
int sceCompatAvailableColorSpaceSetting(void);
int sceCompatCache(int mode, void *addr, SceSize size);
int sceCompatCheckPocketStation(void);
int sceCompatFrameBufferInit(void *framebuffer);
int sceCompatGetCurrentSecureTick(SceRtcTick *tick);
int sceCompatGetDevInf(SceIoDevInfo *info);
int sceCompatGetPeripheralState(int mode);
int sceCompatGetPrimaryHead(void);
int sceCompatGetPspSystemSoftwareVersion(void);
int sceCompatGetStatus(void);
int sceCompatGetTitleList(void *buf, int length);
int sceCompatGetUpdateState(void);
int sceCompatInitEx(int unk);
int sceCompatInterrupt(int intr_code);
int sceCompatIsPocketStationTitle(void);
int sceCompatLCDCSync(void);
int sceCompatReadShared32(int location, int *value);
int sceCompatSetDisplayConfig(int unk0, int unk1);
int sceCompatSetRif(const char *rif);
int sceCompatSetSuspendSema(SceUID semaid1, SceUID semaid2);
int sceCompatSetUpdateState(int state);
int sceCompatStart(void);
int sceCompatStop(void);
int sceCompatSuspendResume(int unk);
int sceCompatUninit(void);
int sceCompatWaitAndGetRequest(int mode, int id);
int sceCompatWaitSpecialRequest(int unk);
int sceCompatWriteShared32(int location, int value);
int sceCompatWriteSharedCtrl(SceCtrlDataPsp *pad_data);
int sceCtrlClearRapidFire(int port, int idx);
int sceCtrlGetBatteryInfo(int port, SceUInt8 *batt);
int sceCtrlGetButtonIntercept(int *intercept);
int sceCtrlGetControllerPortInfo(SceCtrlPortInfo *info);
int sceCtrlGetSamplingMode(SceCtrlPadInputMode *pMode);
int sceCtrlIsMultiControllerSupported(void);
int sceCtrlPeekBufferNegative(int port, SceCtrlData *pad_data, int count);
int sceCtrlPeekBufferPositive(int port, SceCtrlData *pad_data, int count);
int sceCtrlPeekBufferPositiveExt2(int port, SceCtrlData *pad_data, int count);
int sceCtrlReadBufferNegative(int port, SceCtrlData *pad_data, int count);
int sceCtrlReadBufferPositive(int port, SceCtrlData *pad_data, int count);
int sceCtrlReadBufferPositiveExt2(int port, SceCtrlData *pad_data, int count);
int sceCtrlSetActuator(int port, const SceCtrlActuator*pState);
int sceCtrlSetButtonIntercept(int intercept);
int sceCtrlSetLightBar(int port, SceUInt8 r, SceUInt8 g, SceUInt8 b);
int sceCtrlSetRapidFire(int port, int idx, const SceCtrlRapidFireRule*pRule);
int sceCtrlSetSamplingMode(SceCtrlPadInputMode mode);
int sceCtrlSetSamplingModeExt(SceCtrlPadInputMode mode);
int sceDisplayGetPrimaryHead(void);
int sceDisplayGetRefreshRate(float *pFps);
int sceDisplayGetVcount(void);
int sceDisplayGetVcountInternal(int display);
int sceDisplayRegisterVblankStartCallback(SceUID uid);
int sceDisplayUnregisterVblankStartCallback(SceUID uid);
int sceDisplayWaitSetFrameBuf(void);
int sceDisplayWaitSetFrameBufCB(void);
int sceDisplayWaitSetFrameBufMulti(unsigned int vcount);
int sceDisplayWaitSetFrameBufMultiCB(unsigned int vcount);
int sceDisplayWaitVblankStart(void);
int sceDisplayWaitVblankStartCB(void);
int sceDisplayWaitVblankStartMulti(unsigned int vcount);
int sceDisplayWaitVblankStartMultiCB(unsigned int vcount);
int sceDisplayGetFrameBuf(SceDisplayFrameBuf *pParam, SceDisplaySetBufSync sync);
int sceDisplayGetMaximumFrameBufResolution(int *width, int *height);
int sceDisplaySetFrameBuf(const SceDisplayFrameBuf *pParam, SceDisplaySetBufSync sync);
SceInt32 _sceFiberInitializeImpl(SceFiber*fiber, char*name, SceFiberEntry*entry, SceUInt32 argOnInitialize, void*addrContext, SceSize sizeContext, SceFiberOptParam*params);
SceInt32 sceFiberFinalize(SceFiber*fiber);
SceInt32 sceFiberGetInfo(SceFiber*fiber, SceFiberInfo*fiberInfo);
SceInt32 sceFiberGetSelf(SceFiber*fiber);
SceInt32 sceFiberOptParamInitialize(SceFiberOptParam*optParam);
SceInt32 sceFiberReturnToThread(SceUInt32 argOnReturn, SceUInt32*argOnRun);
SceInt32 sceFiberRun(SceFiber*fiber, SceUInt32 argOnRunTo, SceUInt32*argOnRun);
SceInt32 sceFiberSwitch(SceFiber*fiber, SceUInt32 argOnRunTo, SceUInt32*argOnRun);
int sceGxmBeginScene(SceGxmContext *context, unsigned int flags, const SceGxmRenderTarget *renderTarget, const SceGxmValidRegion *validRegion, SceGxmSyncObject *vertexSyncObject, SceGxmSyncObject *fragmentSyncObject, const SceGxmColorSurface *colorSurface, const SceGxmDepthStencilSurface *depthStencil);
void sceGxmColorSurfaceGetClip(const SceGxmColorSurface *surface, unsigned int *xMin, unsigned int *yMin, unsigned int *xMax, unsigned int *yMax);
void *sceGxmColorSurfaceGetData(const SceGxmColorSurface *surface);
SceGxmColorSurfaceDitherMode sceGxmColorSurfaceGetDitherMode(const SceGxmColorSurface *surface);
SceGxmColorFormat sceGxmColorSurfaceGetFormat(const SceGxmColorSurface *surface);
SceGxmColorSurfaceGammaMode sceGxmColorSurfaceGetGammaMode(const SceGxmColorSurface *surface);
SceGxmColorSurfaceScaleMode sceGxmColorSurfaceGetScaleMode(const SceGxmColorSurface *surface);
unsigned int sceGxmColorSurfaceGetStrideInPixels(const SceGxmColorSurface *surface);
SceGxmColorSurfaceType sceGxmColorSurfaceGetType(const SceGxmColorSurface *surface);
int sceGxmColorSurfaceInit(SceGxmColorSurface *surface, SceGxmColorFormat colorFormat, SceGxmColorSurfaceType surfaceType, SceGxmColorSurfaceScaleMode scaleMode, SceGxmOutputRegisterSize outputRegisterSize, unsigned int width, unsigned int height, unsigned int strideInPixels, void *data);
int sceGxmColorSurfaceInitDisabled(SceGxmColorSurface *surface);
SceBool sceGxmColorSurfaceIsEnabled(const SceGxmColorSurface *surface);
void sceGxmColorSurfaceSetClip(SceGxmColorSurface *surface, unsigned int xMin, unsigned int yMin, unsigned int xMax, unsigned int yMax);
int sceGxmColorSurfaceSetData(SceGxmColorSurface *surface, void *data);
int sceGxmColorSurfaceSetDitherMode(SceGxmColorSurface *surface, SceGxmColorSurfaceDitherMode ditherMode);
int sceGxmColorSurfaceSetFormat(SceGxmColorSurface *surface, SceGxmColorFormat format);
int sceGxmColorSurfaceSetGammaMode(SceGxmColorSurface *surface, SceGxmColorSurfaceGammaMode gammaMode);
void sceGxmColorSurfaceSetScaleMode(SceGxmColorSurface *surface, SceGxmColorSurfaceScaleMode scaleMode);
int sceGxmCreateContext(const SceGxmContextParams *params, SceGxmContext **context);
int sceGxmCreateRenderTarget(const SceGxmRenderTargetParams *params, SceGxmRenderTarget **renderTarget);
float sceGxmDepthStencilSurfaceGetBackgroundDepth(const SceGxmDepthStencilSurface *surface);
unsigned char sceGxmDepthStencilSurfaceGetBackgroundStencil(const SceGxmDepthStencilSurface *surface);
SceGxmDepthStencilForceLoadMode sceGxmDepthStencilSurfaceGetForceLoadMode(const SceGxmDepthStencilSurface *surface);
SceGxmDepthStencilForceStoreMode sceGxmDepthStencilSurfaceGetForceStoreMode(const SceGxmDepthStencilSurface *surface);
SceGxmDepthStencilFormat sceGxmDepthStencilSurfaceGetFormat(const SceGxmDepthStencilSurface *surface);
unsigned int sceGxmDepthStencilSurfaceGetStrideInSamples(const SceGxmDepthStencilSurface *surface);
int sceGxmDepthStencilSurfaceInit(SceGxmDepthStencilSurface *surface, SceGxmDepthStencilFormat depthStencilFormat, SceGxmDepthStencilSurfaceType surfaceType, unsigned int strideInSamples, void *depthData, void *stencilData);
int sceGxmDepthStencilSurfaceInitDisabled(SceGxmDepthStencilSurface *surface);
SceBool sceGxmDepthStencilSurfaceIsEnabled(const SceGxmDepthStencilSurface *surface);
void sceGxmDepthStencilSurfaceSetBackgroundDepth(SceGxmDepthStencilSurface *surface, float backgroundDepth);
void sceGxmDepthStencilSurfaceSetBackgroundStencil(SceGxmDepthStencilSurface *surface, unsigned char backgroundStencil);
void sceGxmDepthStencilSurfaceSetForceLoadMode(SceGxmDepthStencilSurface *surface, SceGxmDepthStencilForceLoadMode forceLoad);
void sceGxmDepthStencilSurfaceSetForceStoreMode(SceGxmDepthStencilSurface *surface, SceGxmDepthStencilForceStoreMode forceStore);
int sceGxmDestroyContext(SceGxmContext *context);
int sceGxmDestroyRenderTarget(SceGxmRenderTarget *renderTarget);
int sceGxmDisplayQueueAddEntry(SceGxmSyncObject *oldBuffer, SceGxmSyncObject *newBuffer, const void *callbackData);
int sceGxmDisplayQueueFinish();
int sceGxmDraw(SceGxmContext *context, SceGxmPrimitiveType primType, SceGxmIndexFormat indexType, const void *indexData, unsigned int indexCount);
int sceGxmDrawInstanced(SceGxmContext *context, SceGxmPrimitiveType primType, SceGxmIndexFormat indexType, const void *indexData, unsigned int indexCount, unsigned int indexWrap);
int sceGxmDrawPrecomputed(SceGxmContext *context, const SceGxmPrecomputedDraw *precomputedDraw);
int sceGxmEndScene(SceGxmContext *context, const SceGxmNotification *vertexNotification, const SceGxmNotification *fragmentNotification);
void sceGxmFinish(SceGxmContext *context);
const SceGxmProgram *sceGxmFragmentProgramGetProgram(const SceGxmFragmentProgram *fragmentProgram);
volatile unsigned int *sceGxmGetNotificationRegion();
unsigned int sceGxmGetPrecomputedDrawSize(const SceGxmVertexProgram *vertexProgram);
unsigned int sceGxmGetPrecomputedFragmentStateSize(const SceGxmFragmentProgram *fragmentProgram);
unsigned int sceGxmGetPrecomputedVertexStateSize(const SceGxmVertexProgram *vertexProgram);
int sceGxmGetRenderTargetMemSizes(const SceGxmRenderTargetParams *params, unsigned int *hostMemSize, unsigned int *driverMemSize);
int sceGxmInitialize(const SceGxmInitializeParams *params);
int sceGxmMapFragmentUsseMemory(void *base, SceSize size, unsigned int *offset);
int sceGxmMapMemory(void *base, SceSize size, SceGxmMemoryAttribFlags attr);
int sceGxmMapVertexUsseMemory(void *base, SceSize size, unsigned int *offset);
int sceGxmMidSceneFlush(SceGxmContext *context, unsigned int flags, SceGxmSyncObject *vertexSyncObject, const SceGxmNotification *vertexNotification);
int sceGxmNotificationWait(const SceGxmNotification *notification);
int sceGxmPadHeartbeat(const SceGxmColorSurface *displaySurface, SceGxmSyncObject *displaySyncObject);
int sceGxmPadTriggerGpuPaTrace();
int sceGxmPopUserMarker(SceGxmContext *context);
int sceGxmPrecomputedDrawInit(SceGxmPrecomputedDraw *precomputedDraw, const SceGxmVertexProgram *vertexProgram, void *memBlock);
int sceGxmPrecomputedDrawSetAllVertexStreams(SceGxmPrecomputedDraw *precomputedDraw, const void *const *streamDataArray);
void sceGxmPrecomputedDrawSetParams(SceGxmPrecomputedDraw *precomputedDraw, SceGxmPrimitiveType primType, SceGxmIndexFormat indexType, const void *indexData, unsigned int indexCount);
void sceGxmPrecomputedDrawSetParamsInstanced(SceGxmPrecomputedDraw *precomputedDraw, SceGxmPrimitiveType primType, SceGxmIndexFormat indexType, const void *indexData, unsigned int indexCount, unsigned int indexWrap);
int sceGxmPrecomputedDrawSetVertexStream(SceGxmPrecomputedDraw *precomputedDraw, unsigned int streamIndex, const void *streamData);
void *sceGxmPrecomputedFragmentStateGetDefaultUniformBuffer(const SceGxmPrecomputedFragmentState *precomputedState);
int sceGxmPrecomputedFragmentStateInit(SceGxmPrecomputedFragmentState *precomputedState, const SceGxmFragmentProgram *fragmentProgram, void *memBlock);
int sceGxmPrecomputedFragmentStateSetAllAuxiliarySurfaces(SceGxmPrecomputedFragmentState *precomputedState, const SceGxmAuxiliarySurface *auxSurfaceArray);
int sceGxmPrecomputedFragmentStateSetAllTextures(SceGxmPrecomputedFragmentState *precomputedState, const SceGxmTexture *textureArray);
int sceGxmPrecomputedFragmentStateSetAllUniformBuffers(SceGxmPrecomputedFragmentState *precomputedState, const void *const *bufferDataArray);
void sceGxmPrecomputedFragmentStateSetDefaultUniformBuffer(SceGxmPrecomputedFragmentState *precomputedState, void *defaultBuffer);
int sceGxmPrecomputedFragmentStateSetTexture(SceGxmPrecomputedFragmentState *precomputedState, unsigned int textureIndex, const SceGxmTexture *texture);
int sceGxmPrecomputedFragmentStateSetUniformBuffer(SceGxmPrecomputedFragmentState *precomputedState, unsigned int bufferIndex, const void *bufferData);
void *sceGxmPrecomputedVertexStateGetDefaultUniformBuffer(const SceGxmPrecomputedVertexState *precomputedState);
int sceGxmPrecomputedVertexStateInit(SceGxmPrecomputedVertexState *precomputedState, const SceGxmVertexProgram *vertexProgram, void *memBlock);
int sceGxmPrecomputedVertexStateSetAllTextures(SceGxmPrecomputedVertexState *precomputedState, const SceGxmTexture *textures);
int sceGxmPrecomputedVertexStateSetAllUniformBuffers(SceGxmPrecomputedVertexState *precomputedState, const void *const *bufferDataArray);
void sceGxmPrecomputedVertexStateSetDefaultUniformBuffer(SceGxmPrecomputedVertexState *precomputedState, void *defaultBuffer);
int sceGxmPrecomputedVertexStateSetTexture(SceGxmPrecomputedVertexState *precomputedState, unsigned int textureIndex, const SceGxmTexture *texture);
int sceGxmPrecomputedVertexStateSetUniformBuffer(SceGxmPrecomputedVertexState *precomputedState, unsigned int bufferIndex, const void *bufferData);
int sceGxmProgramCheck(const SceGxmProgram *program);
const SceGxmProgramParameter *sceGxmProgramFindParameterByName(const SceGxmProgram *program, const char *name);
const SceGxmProgramParameter *sceGxmProgramFindParameterBySemantic(const SceGxmProgram *program, SceGxmParameterSemantic semantic, unsigned int index);
unsigned int sceGxmProgramGetDefaultUniformBufferSize(const SceGxmProgram *program);
const SceGxmProgramParameter *sceGxmProgramGetParameter(const SceGxmProgram *program, unsigned int index);
unsigned int sceGxmProgramGetParameterCount(const SceGxmProgram *program);
unsigned int sceGxmProgramGetSize(const SceGxmProgram *program);
SceGxmProgramType sceGxmProgramGetType(const SceGxmProgram *program);
SceBool sceGxmProgramIsDepthReplaceUsed(const SceGxmProgram *program);
SceBool sceGxmProgramIsDiscardUsed(const SceGxmProgram *program);
SceBool sceGxmProgramIsSpriteCoordUsed(const SceGxmProgram *program);
unsigned int sceGxmProgramParameterGetArraySize(const SceGxmProgramParameter *parameter);
SceGxmParameterCategory sceGxmProgramParameterGetCategory(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetComponentCount(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetContainerIndex(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetIndex(const SceGxmProgram *program, const SceGxmProgramParameter *parameter);
const char *sceGxmProgramParameterGetName(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetResourceIndex(const SceGxmProgramParameter *parameter);
SceGxmParameterSemantic sceGxmProgramParameterGetSemantic(const SceGxmProgramParameter *parameter);
unsigned int sceGxmProgramParameterGetSemanticIndex(const SceGxmProgramParameter *parameter);
SceGxmParameterType sceGxmProgramParameterGetType(const SceGxmProgramParameter *parameter);
SceBool sceGxmProgramParameterIsSamplerCube(const SceGxmProgramParameter *parameter);
int sceGxmPushUserMarker(SceGxmContext *context, const char *tag);
int sceGxmRenderTargetGetDriverMemBlock(const SceGxmRenderTarget *renderTarget, SceUID *driverMemBlock);
int sceGxmRenderTargetGetHostMem(const SceGxmRenderTarget *renderTarget, void **hostMem);
int sceGxmReserveFragmentDefaultUniformBuffer(SceGxmContext *context, void **uniformBuffer);
int sceGxmReserveVertexDefaultUniformBuffer(SceGxmContext *context, void **uniformBuffer);
int sceGxmSetAuxiliarySurface(SceGxmContext *context, unsigned int surfaceIndex, const SceGxmAuxiliarySurface *surface);
void sceGxmSetBackDepthBias(SceGxmContext *context, int factor, int units);
void sceGxmSetBackDepthFunc(SceGxmContext *context, SceGxmDepthFunc depthFunc);
void sceGxmSetBackDepthWriteEnable(SceGxmContext *context, SceGxmDepthWriteMode enable);
void sceGxmSetBackFragmentProgramEnable(SceGxmContext *context, SceGxmFragmentProgramMode enable);
void sceGxmSetBackLineFillLastPixelEnable(SceGxmContext *context, SceGxmLineFillLastPixelMode enable);
void sceGxmSetBackPointLineWidth(SceGxmContext *context, unsigned int width);
void sceGxmSetBackPolygonMode(SceGxmContext *context, SceGxmPolygonMode mode);
void sceGxmSetBackStencilFunc(SceGxmContext *context, SceGxmStencilFunc func, SceGxmStencilOp stencilFail, SceGxmStencilOp depthFail, SceGxmStencilOp depthPass, unsigned char compareMask, unsigned char writeMask);
void sceGxmSetBackStencilRef(SceGxmContext *context, unsigned int sref);
void sceGxmSetBackVisibilityTestEnable(SceGxmContext *context, SceGxmVisibilityTestMode enable);
void sceGxmSetBackVisibilityTestIndex(SceGxmContext *context, unsigned int index);
void sceGxmSetBackVisibilityTestOp(SceGxmContext *context, SceGxmVisibilityTestOp op);
void sceGxmSetCullMode(SceGxmContext *context, SceGxmCullMode mode);
void sceGxmSetFragmentProgram(SceGxmContext *context, const SceGxmFragmentProgram *fragmentProgram);
int sceGxmSetFragmentTexture(SceGxmContext *context, unsigned int textureIndex, const SceGxmTexture *texture);
int sceGxmSetFragmentUniformBuffer(SceGxmContext *context, unsigned int bufferIndex, const void *bufferData);
void sceGxmSetFrontDepthBias(SceGxmContext *context, int factor, int units);
void sceGxmSetFrontDepthFunc(SceGxmContext *context, SceGxmDepthFunc depthFunc);
void sceGxmSetFrontDepthWriteEnable(SceGxmContext *context, SceGxmDepthWriteMode enable);
void sceGxmSetFrontFragmentProgramEnable(SceGxmContext *context, SceGxmFragmentProgramMode enable);
void sceGxmSetFrontLineFillLastPixelEnable(SceGxmContext *context, SceGxmLineFillLastPixelMode enable);
void sceGxmSetFrontPointLineWidth(SceGxmContext *context, unsigned int width);
void sceGxmSetFrontPolygonMode(SceGxmContext *context, SceGxmPolygonMode mode);
void sceGxmSetFrontStencilFunc(SceGxmContext *context, SceGxmStencilFunc func, SceGxmStencilOp stencilFail, SceGxmStencilOp depthFail, SceGxmStencilOp depthPass, unsigned char compareMask, unsigned char writeMask);
void sceGxmSetFrontStencilRef(SceGxmContext *context, unsigned int sref);
void sceGxmSetFrontVisibilityTestEnable(SceGxmContext *context, SceGxmVisibilityTestMode enable);
void sceGxmSetFrontVisibilityTestIndex(SceGxmContext *context, unsigned int index);
void sceGxmSetFrontVisibilityTestOp(SceGxmContext *context, SceGxmVisibilityTestOp op);
void sceGxmSetPrecomputedFragmentState(SceGxmContext *context, const SceGxmPrecomputedFragmentState *precomputedState);
void sceGxmSetPrecomputedVertexState(SceGxmContext *context, const SceGxmPrecomputedVertexState *precomputedState);
void sceGxmSetRegionClip(SceGxmContext *context, SceGxmRegionClipMode mode, unsigned int xMin, unsigned int yMin, unsigned int xMax, unsigned int yMax);
void sceGxmSetTwoSidedEnable(SceGxmContext *context, SceGxmTwoSidedMode enable);
int sceGxmSetUniformDataF(void *uniformBuffer, const SceGxmProgramParameter *parameter, unsigned int componentOffset, unsigned int componentCount, const float *sourceData);
int sceGxmSetUserMarker(SceGxmContext *context, const char *tag);
void sceGxmSetValidationEnable(SceGxmContext *context, SceBool enable);
void sceGxmSetVertexProgram(SceGxmContext *context, const SceGxmVertexProgram *vertexProgram);
int sceGxmSetVertexStream(SceGxmContext *context, unsigned int streamIndex, const void *streamData);
int sceGxmSetVertexTexture(SceGxmContext *context, unsigned int textureIndex, const SceGxmTexture *texture);
int sceGxmSetVertexUniformBuffer(SceGxmContext *context, unsigned int bufferIndex, const void *bufferData);
void sceGxmSetViewport(SceGxmContext *context, float xOffset, float xScale, float yOffset, float yScale, float zOffset, float zScale);
void sceGxmSetViewportEnable(SceGxmContext *context, SceGxmViewportMode enable);
int sceGxmSetVisibilityBuffer(SceGxmContext *context, void *bufferBase, unsigned int stridePerCore);
void sceGxmSetWBufferEnable(SceGxmContext *context, SceGxmWBufferMode enable);
void sceGxmSetWClampEnable(SceGxmContext *context, SceGxmWClampMode enable);
void sceGxmSetWClampValue(SceGxmContext *context, float clampValue);
int sceGxmShaderPatcherAddRefFragmentProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmFragmentProgram *fragmentProgram);
int sceGxmShaderPatcherAddRefVertexProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmVertexProgram *vertexProgram);
int sceGxmShaderPatcherCreate(const SceGxmShaderPatcherParams *params, SceGxmShaderPatcher **shaderPatcher);
int sceGxmShaderPatcherCreateFragmentProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmShaderPatcherId programId, SceGxmOutputRegisterFormat outputFormat, SceGxmMultisampleMode multisampleMode, const SceGxmBlendInfo *blendInfo, const SceGxmProgram *vertexProgram, SceGxmFragmentProgram **fragmentProgram);
int sceGxmShaderPatcherCreateMaskUpdateFragmentProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmFragmentProgram **fragmentProgram);
int sceGxmShaderPatcherCreateVertexProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmShaderPatcherId programId, const SceGxmVertexAttribute *attributes, unsigned int attributeCount, const SceGxmVertexStream *streams, unsigned int streamCount, SceGxmVertexProgram **vertexProgram);
int sceGxmShaderPatcherDestroy(SceGxmShaderPatcher *shaderPatcher);
int sceGxmShaderPatcherForceUnregisterProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmShaderPatcherId programId);
unsigned int sceGxmShaderPatcherGetBufferMemAllocated(const SceGxmShaderPatcher *shaderPatcher);
int sceGxmShaderPatcherGetFragmentProgramRefCount(SceGxmShaderPatcher *shaderPatcher, SceGxmFragmentProgram *fragmentProgram, unsigned int *count);
unsigned int sceGxmShaderPatcherGetFragmentUsseMemAllocated(const SceGxmShaderPatcher *shaderPatcher);
unsigned int sceGxmShaderPatcherGetHostMemAllocated(const SceGxmShaderPatcher *shaderPatcher);
const SceGxmProgram *sceGxmShaderPatcherGetProgramFromId(SceGxmShaderPatcherId programId);
void *sceGxmShaderPatcherGetUserData(SceGxmShaderPatcher *shaderPatcher);
int sceGxmShaderPatcherGetVertexProgramRefCount(SceGxmShaderPatcher *shaderPatcher, SceGxmVertexProgram *fragmentProgram, unsigned int *count);
unsigned int sceGxmShaderPatcherGetVertexUsseMemAllocated(const SceGxmShaderPatcher *shaderPatcher);
int sceGxmShaderPatcherRegisterProgram(SceGxmShaderPatcher *shaderPatcher, const SceGxmProgram *programHeader, SceGxmShaderPatcherId *programId);
int sceGxmShaderPatcherReleaseFragmentProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmFragmentProgram *fragmentProgram);
int sceGxmShaderPatcherReleaseVertexProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmVertexProgram *vertexProgram);
int sceGxmShaderPatcherSetAuxiliarySurface(SceGxmShaderPatcher *shaderPatcher, unsigned int auxSurfaceIndex, const SceGxmAuxiliarySurface *auxSurface);
int sceGxmShaderPatcherSetUserData(SceGxmShaderPatcher *shaderPatcher, void *userData);
int sceGxmShaderPatcherUnregisterProgram(SceGxmShaderPatcher *shaderPatcher, SceGxmShaderPatcherId programId);
int sceGxmSyncObjectCreate(SceGxmSyncObject **syncObject);
int sceGxmSyncObjectDestroy(SceGxmSyncObject *syncObject);
int sceGxmTerminate();
void *sceGxmTextureGetData(const SceGxmTexture *texture);
SceGxmTextureFormat sceGxmTextureGetFormat(const SceGxmTexture *texture);
SceGxmTextureGammaMode sceGxmTextureGetGammaMode(const SceGxmTexture *texture);
unsigned int sceGxmTextureGetHeight(const SceGxmTexture *texture);
unsigned int sceGxmTextureGetLodBias(const SceGxmTexture *texture);
SceGxmTextureFilter sceGxmTextureGetMagFilter(const SceGxmTexture *texture);
SceGxmTextureFilter sceGxmTextureGetMinFilter(const SceGxmTexture *texture);
SceGxmTextureMipFilter sceGxmTextureGetMipFilter(const SceGxmTexture *texture);
unsigned int sceGxmTextureGetMipmapCount(const SceGxmTexture *texture);
void *sceGxmTextureGetPalette(const SceGxmTexture *texture);
unsigned int sceGxmTextureGetStride(const SceGxmTexture *texture);
SceGxmTextureType sceGxmTextureGetType(const SceGxmTexture *texture);
SceGxmTextureAddrMode sceGxmTextureGetUAddrMode(const SceGxmTexture *texture);
SceGxmTextureAddrMode sceGxmTextureGetVAddrMode(const SceGxmTexture *texture);
unsigned int sceGxmTextureGetWidth(const SceGxmTexture *texture);
int sceGxmTextureInitCube(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int mipCount);
int sceGxmTextureInitLinear(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int mipCount);
int sceGxmTextureInitLinearStrided(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int byteStride);
int sceGxmTextureInitSwizzled(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int mipCount);
int sceGxmTextureInitTiled(SceGxmTexture *texture, const void *data, SceGxmTextureFormat texFormat, unsigned int width, unsigned int height, unsigned int mipCount);
int sceGxmTextureSetData(SceGxmTexture *texture, const void *data);
int sceGxmTextureSetFormat(SceGxmTexture *texture, SceGxmTextureFormat texFormat);
int sceGxmTextureSetGammaMode(SceGxmTexture *texture, SceGxmTextureGammaMode gammaMode);
int sceGxmTextureSetHeight(SceGxmTexture *texture, unsigned int height);
int sceGxmTextureSetLodBias(SceGxmTexture *texture, unsigned int bias);
int sceGxmTextureSetMagFilter(SceGxmTexture *texture, SceGxmTextureFilter magFilter);
int sceGxmTextureSetMinFilter(SceGxmTexture *texture, SceGxmTextureFilter minFilter);
int sceGxmTextureSetMipFilter(SceGxmTexture *texture, SceGxmTextureMipFilter mipFilter);
int sceGxmTextureSetMipmapCount(SceGxmTexture *texture, unsigned int mipCount);
int sceGxmTextureSetPalette(SceGxmTexture *texture, const void *paletteData);
int sceGxmTextureSetStride(SceGxmTexture *texture, unsigned int byteStride);
int sceGxmTextureSetUAddrMode(SceGxmTexture *texture, SceGxmTextureAddrMode addrMode);
int sceGxmTextureSetVAddrMode(SceGxmTexture *texture, SceGxmTextureAddrMode addrMode);
int sceGxmTextureSetWidth(SceGxmTexture *texture, unsigned int width);
int sceGxmTransferCopy(uint32_t width, uint32_t height, uint32_t colorKeyValue, uint32_t colorKeyMask, SceGxmTransferColorKeyMode colorKeyMode, SceGxmTransferFormat srcFormat, SceGxmTransferType srcType, const void *srcAddress, uint32_t srcX, uint32_t srcY, int32_t srcStride, SceGxmTransferFormat destFormat, SceGxmTransferType destType, void *destAddress, uint32_t destX, uint32_t destY, int32_t destStride, SceGxmSyncObject *syncObject, uint32_t syncFlags, const SceGxmNotification *notification);
int sceGxmTransferDownscale(SceGxmTransferFormat srcFormat, const void *srcAddress, unsigned int srcX, unsigned int srcY, unsigned int srcWidth, unsigned int srcHeight, int srcStride, SceGxmTransferFormat destFormat, void *destAddress, unsigned int destX, unsigned int destY, int destStride, SceGxmSyncObject *syncObject, unsigned int syncFlags, const SceGxmNotification*notification);
int sceGxmTransferFinish(void);
int sceGxmUnmapFragmentUsseMemory(void *base);
int sceGxmUnmapMemory(void *base);
int sceGxmUnmapVertexUsseMemory(void *base);
const SceGxmProgram *sceGxmVertexProgramGetProgram(const SceGxmVertexProgram *vertexProgram);
int sceHidKeyboardEnumerate(int*handle, int count);
int sceHidKeyboardRead(SceUInt32 handle, SceHidKeyboardReport *reports[], int nReports);
int sceHidMouseEnumerate(int*handle, int count);
int sceHidMouseRead(SceUInt32 handle, SceHidMouseReport *reports[], int nReports);
int sceHttpAbortRequest(int reqId);
int sceHttpAddCookie(const char *url, const char *cookie, unsigned int cookieLength);
int sceHttpAddRequestHeader(int id, const char *name, const char *value, unsigned int mode);
int sceHttpCreateConnection(int tmplId, const char *serverName, const char *scheme, unsigned short port, int enableKeepalive);
int sceHttpCreateConnectionWithURL(int tmplId, const char *url, int enableKeepalive);
int sceHttpCreateRequest(int connId, int method, const char *path, unsigned long long int contentLength);
int sceHttpCreateRequestWithURL(int connId, int method, const char *url, unsigned long long int contentLength);
int sceHttpCreateTemplate(const char *userAgent, int httpVer, int autoProxyConf);
int sceHttpDeleteConnection(int connId);
int sceHttpDeleteRequest(int reqId);
int sceHttpDeleteTemplate(int tmplId);
int sceHttpGetAllResponseHeaders(int reqId, char **header, unsigned int *headerSize);
int sceHttpGetAuthEnabled(int id, int *enable);
int sceHttpGetAutoRedirect(int id, int *enable);
int sceHttpGetCookie(const char *url, char *cookie, unsigned int *cookieLength,unsigned int prepare, int secure);
int sceHttpGetCookieEnabled(int id, int *enable);
int sceHttpGetMemoryPoolStats(SceHttpMemoryPoolStats *currentStat);
int sceHttpGetResponseContentLength(int reqId, unsigned long long int *contentLength);
int sceHttpGetStatusCode(int reqId, int *statusCode);
int sceHttpInit(unsigned int poolSize);
int sceHttpParseResponseHeader(const char *header, unsigned int headerLen, const char *fieldStr, const char **fieldValue, unsigned int *valueLen);
int sceHttpParseStatusLine(const char *statusLine, unsigned int lineLen, int *httpMajorVer, int *httpMinorVer, int *responseCode, const char **reasonPhrase, unsigned int *phraseLen);
int sceHttpReadData(int reqId, void *data, unsigned int size);
int sceHttpRemoveRequestHeader(int id, const char *name);
int sceHttpSendRequest(int reqId, const void *postData, unsigned int size);
int sceHttpSetAuthEnabled(int id, int enable);
int sceHttpSetAuthInfoCallback(int id, SceHttpAuthInfoCallback cbfunc, void *userArg);
int sceHttpSetAutoRedirect(int id, int enable);
int sceHttpSetConnectTimeOut(int id, unsigned int usec);
int sceHttpSetCookieEnabled(int id, int enable);
int sceHttpSetCookieRecvCallback(int id, SceHttpCookieRecvCallback cbfunc, void *userArg);
int sceHttpSetCookieSendCallback(int id, SceHttpCookieSendCallback cbfunc, void *userArg);
int sceHttpSetRecvTimeOut(int id, unsigned int usec);
int sceHttpSetRedirectCallback(int id, SceHttpRedirectCallback cbfunc, void *userArg);
int sceHttpSetRequestContentLength(int id, unsigned long long int contentLength);
int sceHttpSetResolveRetry(int id, int retry);
int sceHttpSetResolveTimeOut(int id, unsigned int usec);
int sceHttpSetResponseHeaderMaxSize(int id, unsigned int headerSize);
int sceHttpSetSendTimeOut(int id, unsigned int usec);
int sceHttpTerm(void);
int sceHttpUriBuild(char *out, unsigned int *require, unsigned int prepare, const SceHttpUriElement *srcElement, unsigned int option);
int sceHttpUriEscape(char *out, unsigned int *require, unsigned int prepare, const char *in);
int sceHttpUriMerge(char *mergedUrl, const char *url, const char *relativeUrl, unsigned int *require, unsigned int prepare, unsigned int option);
int sceHttpUriParse(SceHttpUriElement *out, const char *srcUrl, void *pool, unsigned int *require, unsigned int prepare);
int sceHttpUriSweepPath(char *dst, const char *src , unsigned int srcSize);
int sceHttpUriUnescape(char *out, unsigned int *require, unsigned int prepare, const char *in);
int sceHttpsDisableOption(unsigned int sslFlags);
int sceHttpsEnableOption(unsigned int sslFlags);
int sceHttpsFreeCaList(SceHttpsCaList*caList);
int sceHttpsGetCaList(SceHttpsCaList*caList);
int sceHttpsGetSslError(int id, int *errNum, unsigned int *detail);
int sceHttpsLoadCert(int caCertNum, const SceHttpsData **caList, const SceHttpsData *cert, const SceHttpsData *privKey);
int sceHttpsSetSslCallback(int id, SceHttpsCallback cbfunc, void *userArg);
int sceHttpsUnloadCert(void);
int sceIoCancel(SceUID fd);
int sceIoClose(SceUID fd);
int sceIoCloseAsync(SceUID fd);
int sceIoDclose(SceUID fd);
int sceIoLseek32(SceUID fd, int offset, int whence);
int sceIoRead(SceUID fd, void *data, SceSize size);
int sceIoReadAsync(SceUID fd, void *data, SceSize size);
int sceIoSyncByFd(SceUID fd);
int sceIoWrite(SceUID fd, const void *data, SceSize size);
int sceIoWriteAsync(SceUID fd, const void *data, SceSize size);
int sceJpegEncoderCsc(SceJpegEncoderContext context, void *outBuffer, const void *inBuffer, int inPitch, SceJpegEncoderPixelFormat inPixelFormat);
int sceJpegEncoderEncode(SceJpegEncoderContext context, const void *inBuffer);
int sceJpegEncoderEnd(SceJpegEncoderContext context);
int sceJpegEncoderGetContextSize(void);
int sceJpegEncoderInit(SceJpegEncoderContext context, int inWidth, int inHeight, SceJpegEncoderPixelFormat pixelformat, void *outBuffer, SceSize outSize);
int sceJpegEncoderInitWithParam(SceJpegEncoderContext context, const SceJpegEncoderInitParam *initParam);
int sceJpegEncoderSetCompressionRatio(SceJpegEncoderContext context, int ratio);
int sceJpegEncoderSetHeaderMode(SceJpegEncoderContext context, int mode);
int sceJpegEncoderSetOutputAddr(SceJpegEncoderContext context, void *outBuffer, SceSize outSize);
int sceJpegEncoderSetValidRegion(SceJpegEncoderContext context, int inWidth, int inHeight);
void *sceDmacMemcpy(void *dst, const void *src, size_t size);
void *sceDmacMemset(void *dst, int c, size_t size);
int sceKernelGetModuleInfo(SceUID modid, SceKernelModuleInfo *info);
int sceKernelGetModuleList(int flags, SceUID *modids, int *num);
int sceKernelGetSystemSwVersion(SceKernelFwInfo *data);
int sceKernelCancelCallback(SceUID cb);
int sceKernelChangeThreadPriority(SceUID thid, int priority);
int sceKernelCheckCallback(void);
int sceKernelClearEventFlag(SceUID evid, unsigned int bits);
int sceKernelCloseCond(SceUID condId);
int sceKernelCloseMutex(SceUID mutexid);
int sceKernelCreateCallback(const char *name, unsigned int attr, SceKernelCallbackFunction func, void *arg);
int sceKernelDelayThread(SceUInt delay);
int sceKernelDelayThreadCB(SceUInt delay);
int sceKernelDeleteCallback(SceUID cb);
int sceKernelDeleteCond(SceUID condId);
int sceKernelDeleteEventFlag(int evid);
int sceKernelDeleteMsgPipe(SceUID uid);
int sceKernelDeleteMutex(SceUID mutexid);
int sceKernelDeleteSema(SceUID semaid);
int sceKernelDeleteThread(SceUID thid);
int sceKernelExitDeleteThread(int status);
int sceKernelGetCallbackCount(SceUID cb);
SceUID sceKernelGetProcessId(void);
SceInt64 sceKernelGetSystemTimeWide(void);
int sceKernelGetThreadStackFreeSize(SceUID thid);
void *sceKernelGetThreadTLSAddr(SceUID thid, int key);
SceKernelIdListType sceKernelGetThreadmgrUIDClass(SceUID uid);
int sceKernelNotifyCallback(SceUID cb, int arg2);
int sceKernelOpenCond(const char *name);
int sceKernelOpenMutex(const char *name);
int sceKernelPollSema(SceUID semaid, int signal);
int sceKernelSetEventFlag(SceUID evid, unsigned int bits);
int sceKernelSignalCond(SceUID condId);
int sceKernelSignalCondAll(SceUID condId);
int sceKernelSignalCondTo(SceUID condId, SceUID threadId);
int sceKernelSignalSema(SceUID semaid, int signal);
int sceKernelTryLockMutex(SceUID mutexid, int lockCount);
int sceKernelUnlockMutex(SceUID mutexid, int unlockCount);
int sceKernelExitThread(int status);
void *sceClibMemcpy(void *, const void *, SceSize);
void *sceClibMemmove(void *, const void *, SceSize);
void *sceClibMemset(void *, int, SceSize);
int sceClibPrintf(const char *, ...);
int sceClibSnprintf(char *, SceSize, const char *, ...);
int sceClibStrcmp(const char *, const char *);
int sceClibStrncasecmp(const char *, const char *, SceSize);
char *sceClibStrncat(char *, const char *, SceSize);
void *sceClibStrncmp(const char *, const char *, SceSize);
char *sceClibStrncpy(char *, const char *, SceSize);
SceSize sceClibStrnlen(const char *, SceSize);
char *sceClibStrrchr(const char *, int);
int sceClibVsnprintf(char *, SceSize, const char *, va_list);
int sceIoChstat(const char *file, SceIoStat *stat, int bits);
int sceIoChstatByFd(SceUID fd, const SceIoStat *buf, unsigned int cbit);
int sceIoDevctl(const char *dev, unsigned int cmd, void *indata, int inlen, void *outdata, int outlen);
SceUID sceIoDopen(const char *dirname);
int sceIoDread(SceUID fd, SceIoDirent *dir);
int sceIoGetstat(const char *file, SceIoStat *stat);
int sceIoGetstatByFd(SceUID fd, SceIoStat *stat);
int sceIoIoctl(SceUID fd, unsigned int cmd, void *indata, int inlen, void *outdata, int outlen);
int sceIoIoctlAsync(SceUID fd, unsigned int cmd, void *indata, int inlen, void *outdata, int outlen);
SceOff sceIoLseek(SceUID fd, SceOff offset, int whence);
int sceIoLseekAsync(SceUID fd, SceOff offset, int whence);
int sceIoMkdir(const char *dir, SceMode mode);
SceUID sceIoOpen(const char *file, int flags, SceMode mode);
SceUID sceIoOpenAsync(const char *file, int flags, SceMode mode);
int sceIoPread(SceUID fd, void *data, SceSize size, SceOff offset);
int sceIoPwrite(SceUID fd, const void *data, SceSize size, SceOff offset);
int sceIoRemove(const char *file);
int sceIoRename(const char *oldname, const char *newname);
int sceIoRmdir(const char *path);
int sceIoSync(const char *device, unsigned int unk);
int sceKernelCancelMsgPipe(SceUID uid, int *psend, int *precv);
int sceKernelCancelMutex(SceUID mutexid, int newCount, int *numWaitThreads);
int sceKernelCancelSema(SceUID semaid, int setCount, int *numWaitThreads);
int sceKernelChangeCurrentThreadAttr(int unknown, SceUInt attr);
int sceKernelCheckThreadStack(void);
SceUID sceKernelCreateCond(const char *name, SceUInt attr, SceUID mutexId, const SceKernelCondOptParam *option);
SceUID sceKernelCreateEventFlag(const char *name, int attr, int bits, SceKernelEventFlagOptParam *opt);
int sceKernelCreateLwCond(SceKernelLwCondWork *pWork, const char *pName, unsigned int attr, SceKernelLwMutexWork *pLwMutex, const SceKernelLwCondOptParam *pOptParam);
int sceKernelCreateLwMutex(SceKernelLwMutexWork *pWork,const char *pName, unsigned int attr, int initCount, const SceKernelLwMutexOptParam *pOptParam);
SceUID sceKernelCreateMsgPipe(const char *name, int type, int attr, unsigned int bufSize, void *opt);
SceUID sceKernelCreateMutex(const char *name, SceUInt attr, int initCount, SceKernelMutexOptParam *option);
SceUID sceKernelCreateSema(const char *name, SceUInt attr, int initVal, int maxVal, SceKernelSemaOptParam *option);
SceUID sceKernelCreateThread(const char *name, SceKernelThreadEntry entry, int initPriority, int stackSize, SceUInt attr, int cpuAffinityMask, const SceKernelThreadOptParam *option);
int sceKernelDeleteLwCond(SceKernelLwCondWork *pWork);
int sceKernelDeleteLwMutex(SceKernelLwMutexWork *pWork);
int sceKernelExitProcess(int res);
int sceKernelGetCallbackInfo(SceUID cb, SceKernelCallbackInfo *infop);
int sceKernelGetEventFlagInfo(SceUID event, SceKernelEventFlagInfo *info);
int sceKernelGetMsgPipeInfo(SceUID uid, SceKernelMppInfo *info);
int sceKernelGetMutexInfo(SceUID mutexid, SceKernelMutexInfo *info);
int sceKernelGetOpenPsId(SceKernelOpenPsId *id);
int sceKernelGetProcessTime(SceKernelSysClock *pSysClock);
SceUInt32 sceKernelGetProcessTimeLow(void);
SceUInt64 sceKernelGetProcessTimeWide(void);
int sceKernelGetSemaInfo(SceUID semaid, SceKernelSemaInfo *info);
int sceKernelGetSystemInfo(SceKernelSystemInfo *info);
void *sceKernelGetTLSAddr(int key);
int sceKernelGetThreadCurrentPriority(void);
int sceKernelGetThreadExitStatus(SceUID thid);
int sceKernelGetThreadId(void);
int sceKernelGetThreadInfo(SceUID thid, SceKernelThreadInfo *info);
int sceKernelGetThreadRunStatus(SceUID thid, SceKernelThreadRunStatus *status);
SceUID sceKernelLoadModule(char *path, int flags, SceKernelLMOption *option);
SceUID sceKernelLoadStartModule(char *path, SceSize args, void *argp, int flags, SceKernelLMOption *option, int *status);
int sceKernelLockLwMutex(SceKernelLwMutexWork *pWork, int lockCount, unsigned int *pTimeout);
int sceKernelLockMutex(SceUID mutexid, int lockCount, unsigned int *timeout);
int sceKernelLockMutexCB(SceUID mutexid, int lockCount, unsigned int *timeout);
int sceKernelPollEventFlag(int evid, unsigned int bits, unsigned int wait, unsigned int *outBits);
int sceKernelReceiveMsgPipe(SceUID uid, void *message, unsigned int size, int unk1, void *unk2, unsigned int *timeout);
int sceKernelReceiveMsgPipeCB(SceUID uid, void *message, unsigned int size, int unk1, void *unk2, unsigned int *timeout);
int sceKernelSendMsgPipe(SceUID uid, void *message, unsigned int size, int unk1, void *unk2, unsigned int *timeout);
int sceKernelSendMsgPipeCB(SceUID uid, void *message, unsigned int size, int unk1, void *unk2, unsigned int *timeout);
int sceKernelSignalLwCond(SceKernelLwCondWork *pWork);
int sceKernelStartModule(SceUID modid, SceSize args, void *argp, int flags, void *option, int *status);
int sceKernelStartThread(SceUID thid, SceSize arglen, void *argp);
int sceKernelStopModule(SceUID modid, SceSize args, void *argp, int flags, void *option, int *status);
int sceKernelStopUnloadModule(SceUID modid, SceSize args, void *argp, int flags, SceKernelULMOption *option, int *status);
int sceKernelTryLockLwMutex(SceKernelLwMutexWork *pWork, int lockCount);
int sceKernelTryReceiveMsgPipe(SceUID uid, void *message, unsigned int size, int unk1, void *unk2);
int sceKernelTrySendMsgPipe(SceUID uid, void *message, unsigned int size, int unk1, void *unk2);
int sceKernelUnloadModule(SceUID modid, int flags, SceKernelULMOption *option);
int sceKernelUnlockLwMutex(SceKernelLwMutexWork *pWork, int unlockCount);
int sceKernelWaitCond(SceUID condId, unsigned int *timeout);
int sceKernelWaitCondCB(SceUID condId, unsigned int *timeout);
int sceKernelWaitEventFlag(int evid, unsigned int bits, unsigned int wait, unsigned int *outBits, SceUInt *timeout);
int sceKernelWaitEventFlagCB(int evid, unsigned int bits, unsigned int wait, unsigned int *outBits, SceUInt *timeout);
int sceKernelWaitLwCond(SceKernelLwCondWork *pWork, unsigned int *pTimeout);
int sceKernelWaitSema(SceUID semaid, int signal, SceUInt *timeout);
int sceKernelWaitSemaCB(SceUID semaid, int signal, SceUInt *timeout);
int sceKernelWaitThreadEnd(SceUID thid, int *stat, SceUInt *timeout);
int sceKernelWaitThreadEndCB(SceUID thid, int *stat, SceUInt *timeout);
int sceKernelGetRandomNumber(void *output, unsigned size);
char *getenv(const char *__string);
void *pss_code_mem_alloc(SceSize *);
void pss_code_mem_flush_icache(const void *, SceSize);
void pss_code_mem_lock(void);
void pss_code_mem_unlock(void);
void _Exit(int __status) ;
void abort(void) ;
int abs(int);
char *asctime(const struct tm *_tblock);
double atof(const char *__nptr);
float atoff(const char *__nptr);
int atoi(const char *__nptr);
long atol(const char *__nptr);
long long atoll(const char *__nptr);
void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
void *calloc(size_t __nmemb, size_t __size) ;
void clearerr(FILE *);
char *ctime(const time_t *_time);
double difftime(time_t _time2, time_t _time1);
void exit(int __status) ;
int fclose(FILE *);
FILE *fdopen(int, const char *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
int fileno(FILE *);
FILE *fopen(const char *_name, const char *_type);
int fprintf(FILE *, const char *, ...) ;
int fputc(int, FILE *);
int fputs(const char *, FILE *);
size_t fread(void *, size_t _size, size_t _n, FILE *);
void free(void *) ;
FILE *freopen(const char *, const char *, FILE *);
int fscanf(FILE *, const char *, ...) ;
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell( FILE *);
size_t fwrite(const void *, size_t _size, size_t _n, FILE *);
int getc(FILE *);
int getchar(void);
char *gets(char *);
struct tm *gmtime(const time_t *_timer);
int isalnum(int __c);
int isalpha(int __c);
int isblank(int __c);
int iscntrl(int __c);
int isdigit(int __c);
int isgraph(int __c);
int islower(int __c);
int isprint(int __c);
int ispunct(int __c);
int isspace(int __c);
int isupper(int __c);
int isxdigit(int __c);
long labs(long);
long long llabs(long long);
struct tm *localtime(const time_t *_timer);
void *malloc(size_t __size) ;
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t *, const char *, size_t);
int mbtowc(wchar_t *, const char *, size_t);
void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);
time_t mktime(struct tm *_timeptr);
void perror(const char *);
int printf(const char *, ...) ;
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand(void);
int rand_r(unsigned *__seed);
void *realloc(void *__r, size_t __size) ;
int remove(const char *);
int rename(const char *, const char *);
void rewind(FILE *);
int scanf(const char *, ...) ;
void setbuf(FILE *, char *);
int setvbuf(FILE *, char *, int, size_t);
int snprintf(char *, size_t, const char *, ...) ;
int sprintf(char *, const char *, ...) ;
void srand(unsigned __seed);
int sscanf(const char *, const char *, ...) ;
int strcasecmp(const char *, const char *);
char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strdup(const char *);
char *strerror(int);
size_t strftime(char *_s, size_t _maxsize, const char *_fmt, const struct tm *_t);
size_t strlen(const char *);
int strncasecmp(const char *, const char *, size_t);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);
char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
double strtod(const char *__n, char **__end_PTR);
float strtof(const char *__n, char **__end_PTR);
char *strtok(char *, const char *);
char *strtok_r(char *, const char *, char **);
long strtol(const char *__n, char **__end_PTR, int __base);
extern long double strtold(const char *, char **);
long long strtoll(const char *__n, char **__end_PTR, int __base);
unsigned long strtoul(const char *__n, char **__end_PTR, int __base);
unsigned long long strtoull(const char *__n, char **__end_PTR, int __base);
size_t strxfrm(char *, const char *, size_t);
int tolower(int __c);
int toupper(int __c);
int ungetc(int, FILE *);
int vfprintf(FILE *, const char *, __gnuc_va_list) ;
int vfscanf(FILE *, const char *, __gnuc_va_list) ;
int vprintf(const char *, __gnuc_va_list) ;
int vscanf(const char *, __gnuc_va_list) ;
int vsnprintf(char *, size_t, const char *, __gnuc_va_list) ;
int vsprintf(char *, const char *, __gnuc_va_list) ;
int vsscanf(const char *, const char *, __gnuc_va_list) ;
size_t wcstombs(char *, const wchar_t *, size_t);
int wctomb(char *, wchar_t);
SceInt32 sceLocationCancelGetLocation(SceLocationHandle handle);
SceInt32 sceLocationClose(SceLocationHandle handle);
SceInt32 sceLocationConfirm(SceLocationHandle handle);
SceInt32 sceLocationConfirmAbort(SceLocationHandle handle);
SceInt32 sceLocationConfirmGetResult(SceLocationHandle handle, SceLocationDialogResult *result);
SceInt32 sceLocationConfirmGetStatus(SceLocationHandle handle, SceLocationDialogStatus *status);
SceInt32 sceLocationGetHeading(SceLocationHandle handle, SceLocationHeadingInfo *headingInfo);
SceInt32 sceLocationGetLocation(SceLocationHandle handle, SceLocationLocationInfo *locationInfo);
SceInt32 sceLocationGetMethod(SceLocationHandle handle, SceLocationLocationMethod *locateMethod, SceLocationHeadingMethod *headingMethod);
SceInt32 sceLocationGetPermission(SceLocationHandle handle, SceLocationPermissionInfo *info);
SceInt32 sceLocationOpen(SceLocationHandle *handle, SceLocationLocationMethod locateMethod, SceLocationHeadingMethod headingMethod);
SceInt32 sceLocationReopen(SceLocationHandle handle, SceLocationLocationMethod locateMethod, SceLocationHeadingMethod headingMethod);
SceInt32 sceLocationSetGpsEmulationFile(unsigned char *filename);
SceInt32 sceLocationStartHeadingCallback(SceLocationHandle handle, SceUInt32 difference, SceLocationHeadingInfoCallback callback, void *userdata);
SceInt32 sceLocationStartLocationCallback(SceLocationHandle handle, SceUInt32 distance, SceLocationLocationInfoCallback callback, void *userdata);
SceInt32 sceLocationStopHeadingCallback(SceLocationHandle handle);
SceInt32 sceLocationStopLocationCallback(SceLocationHandle handle);
float sceMotionGetAngleThreshold(void);
int sceMotionGetBasicOrientation(SceFVector3 *basicOrientation);
int sceMotionGetDeadband(void);
int sceMotionGetMagnetometerState(void);
int sceMotionGetSensorState(SceMotionSensorState *sensorState, int numRecords);
int sceMotionGetState(SceMotionState *motionState);
int sceMotionGetTiltCorrection(void);
int sceMotionMagnetometerOff(void);
int sceMotionMagnetometerOn(void);
int sceMotionReset(void);
int sceMotionRotateYaw(float radians);
int sceMotionSetAngleThreshold(float angle);
int sceMotionSetDeadband(int setValue);
int sceMotionSetTiltCorrection(int setValue);
int sceMotionStartSampling(void);
int sceMotionStopSampling(void);
int sceMtpIfStartDriver(int flags);
int sceMtpIfStopDriver(int flags);
int sceMusicExportFromFile(const char*path, const MusicExportParam*param, void*workingMemory, void*cancelCb, void(*progress)(void*, int), void*user, char*outPath, SceSize outPathSize);
int sceNetAccept(int s, SceNetSockaddr *addr, unsigned int *addrlen);
int sceNetBind(int s, const SceNetSockaddr *addr, unsigned int addrlen);
int sceNetClearDnsCache(int flags);
int sceNetConnect(int s, const SceNetSockaddr *name, unsigned int namelen);
int sceNetDumpAbort(int id, int flags);
int sceNetDumpCreate(const char *name, int len, int flags);
int sceNetDumpDestroy(int id);
int sceNetDumpRead(int id, void *buf, int len, int *pflags);
int sceNetEmulationGet(SceNetEmulationParam *param, int flags);
int sceNetEmulationSet(SceNetEmulationParam *param, int flags);
int sceNetEpollAbort(int eid, int flags);
int sceNetEpollControl(int eid, int op, int id,SceNetEpollEvent *event);
int sceNetEpollCreate(const char *name, int flags);
int sceNetEpollDestroy(int eid);
int sceNetEpollWait(int eid, SceNetEpollEvent *events, int maxevents, int timeout);
int sceNetEpollWaitCB(int eid, SceNetEpollEvent *events, int maxevents, int timeout);
int sceNetEtherNtostr(const SceNetEtherAddr *n, char *str, unsigned int len);
int sceNetEtherStrton(const char *str, SceNetEtherAddr *n);
int sceNetGetMacAddress(SceNetEtherAddr *addr, int flags);
int sceNetGetSockIdInfo(SceNetFdSet *fds, int sockinfoflags, int flags);
int sceNetGetSockInfo(int s, SceNetSockInfo *info, int n, int flags);
int sceNetGetStatisticsInfo(SceNetStatisticsInfo *info, int flags);
int sceNetGetpeername(int s, SceNetSockaddr *name, unsigned int *namelen);
int sceNetGetsockname(int s, SceNetSockaddr *name, unsigned int *namelen);
int sceNetGetsockopt(int s, int level, int optname, void *optval, unsigned int *optlen);
unsigned int sceNetHtonl(unsigned int host32);
long long unsigned int sceNetHtonll(unsigned long long int host64);
unsigned short int sceNetHtons(unsigned short int host16);
const char *sceNetInetNtop(int af,const void *src,char *dst,unsigned int size);
int sceNetInetPton(int af, const char *src, void *dst);
int sceNetInit(SceNetInitParam *param);
int sceNetListen(int s, int backlog);
unsigned int sceNetNtohl(unsigned int net32);
unsigned long long int sceNetNtohll(unsigned long long int net64);
unsigned short int sceNetNtohs(unsigned short int net16);
int sceNetRecv(int s, void *buf, unsigned int len, int flags);
int sceNetRecvfrom(int s, void *buf, unsigned int len, int flags, SceNetSockaddr *from, unsigned int *fromlen);
int sceNetRecvmsg(int s, SceNetMsghdr *msg, int flags);
int sceNetResolverAbort(int rid, int flags);
int sceNetResolverCreate(const char *name, SceNetResolverParam *param, int flags);
int sceNetResolverDestroy(int rid);
int sceNetResolverGetError(int rid, int *result);
int sceNetResolverStartAton(int rid, const SceNetInAddr *addr, char *hostname, int len, int timeout, int retry, int flags);
int sceNetResolverStartNtoa(int rid, const char *hostname, SceNetInAddr *addr, int timeout, int retry, int flags);
int sceNetSend(int s, const void *msg, unsigned int len, int flags);
int sceNetSendmsg(int s, const SceNetMsghdr *msg, int flags);
int sceNetSendto(int s, const void *msg, unsigned int len, int flags, const SceNetSockaddr *to, unsigned int tolen);
int sceNetSetDnsInfo(SceNetDnsInfo *info, int flags);
int sceNetSetsockopt(int s, int level, int optname, const void *optval, unsigned int optlen);
int sceNetShowIfconfig(void *p, int b);
int sceNetShowNetstat(void);
int sceNetShowRoute(void);
int sceNetShutdown(int s, int how);
int sceNetSocket(const char *name, int domain, int type, int protocol);
int sceNetSocketAbort(int s, int flags);
int sceNetSocketClose(int s);
int sceNetTerm(void);
int sceNetCtlAdhocDisconnect();
int sceNetCtlAdhocGetInAddr(SceNetInAddr *inaddr);
int sceNetCtlAdhocGetPeerList(unsigned int *buflen, void *buf);
int sceNetCtlAdhocGetResult(int eventType, int *errorCode);
int sceNetCtlAdhocGetState(int *state);
int sceNetCtlAdhocRegisterCallback(SceNetCtlCallback func, void *arg, int *cid);
int sceNetCtlAdhocUnregisterCallback(int cid);
int sceNetCtlCheckCallback();
int sceNetCtlGetNatInfo(SceNetCtlNatInfo *natinfo);
int sceNetCtlInetGetInfo(int code, SceNetCtlInfo *info);
int sceNetCtlInetGetResult(int eventType, int *errorCode);
int sceNetCtlInetGetState(int *state);
int sceNetCtlInetRegisterCallback(SceNetCtlCallback func, void *arg, int *cid);
int sceNetCtlInetUnregisterCallback(int cid);
int sceNetCtlInit();
void sceNetCtlTerm();
int _sceNpDrmGetFixedRifName(char *rif_name, int unk, uint64_t aid);
int _sceNpDrmGetRifName(char *rif_name, int unk, uint64_t aid);
int _sceNpDrmGetRifNameForInstall(char *rif_name, const void *rif_data, int unk);
int _sceNpDrmPackageCheck(const void *buffer, SceSize size, int zero, unsigned int identifier);
int _sceNpDrmPackageDecrypt(void *buffer, SceSize size, _sceNpDrmPackageDecrypt_opt *opt);
int sce_paf_private_bcmp(const void *ptr1, const void *ptr2, size_t num);
void *sce_paf_private_bcopy(void *destination, const void *source, size_t num);
void *sce_paf_private_bzero(void *ptr, size_t num);
void sce_paf_private_free(void *ptr);
void *sce_paf_private_malloc(size_t size);
void *sce_paf_private_memchr(const void *ptr, int value, size_t num);
int sce_paf_private_memcmp(const void *ptr1, const void *ptr2, size_t num);
void *sce_paf_private_memcpy(void *destination, const void *source, size_t num);
void *sce_paf_private_memcpy2(void *destination, const void *source, size_t num);
void *sce_paf_private_memmove(void *destination, const void *source, size_t num);
void *sce_paf_private_memset(void *ptr, int value, size_t num);
int sce_paf_private_snprintf(char *s, size_t n, const char *format, ...);
int sce_paf_private_strcasecmp(const char *str1, const char *str2);
char *sce_paf_private_strchr(const char *str, int character);
int sce_paf_private_strcmp(const char *str1, const char *str2);
size_t sce_paf_private_strlen(const char *str);
int sce_paf_private_strncasecmp(const char *str1, const char *str2, size_t num);
int sce_paf_private_strncmp(const char *str1, const char *str2, size_t num);
char *sce_paf_private_strncpy(char *destination, const char *source, size_t num);
char *sce_paf_private_strrchr(const char *str, int character);
int sceFontClose(SceFontHandle fontHandle);
int sceFontDoneLib(SceFontLibHandle libHandle);
int sceFontFindFont(SceFontLibHandle libHandle, SceFontStyle *fontStyle, unsigned int *errorCode);
int sceFontFindOptimumFont(SceFontLibHandle libHandle, SceFontStyle *fontStyle, unsigned int *errorCode);
int sceFontFlush(SceFontHandle fontHandle);
int sceFontGetCharGlyphImage(SceFontHandle fontHandle, unsigned int charCode, SceFontGlyphImage *glyphImage);
int sceFontGetCharGlyphImage_Clip(SceFontHandle fontHandle, unsigned int charCode, SceFontGlyphImage *glyphImage, int clipXPos, int clipYPos, int clipWidth, int clipHeight);
int sceFontGetCharImageRect(SceFontHandle fontHandle, unsigned int charCode, SceFontImageRect *charRect);
int sceFontGetCharInfo(SceFontHandle fontHandle, unsigned int charCode, SceFontCharInfo *charInfo);
int sceFontGetFontInfo(SceFontHandle fontHandle, SceFontInfo *fontInfo);
int sceFontGetFontInfoByIndexNumber(SceFontLibHandle libHandle, SceFontStyle *fontStyle, int unknown, int fontIndex);
int sceFontGetFontList(SceFontLibHandle libHandle, SceFontStyle *fontStyle, int numFonts);
int sceFontGetNumFontList(SceFontLibHandle libHandle, unsigned int *errorCode);
SceFontLibHandle sceFontNewLib(SceFontNewLibParams *params, unsigned int *errorCode);
SceFontHandle sceFontOpen(SceFontLibHandle libHandle, int index, int mode, unsigned int *errorCode);
SceFontHandle sceFontOpenUserFile(SceFontLibHandle libHandle, char *file, int mode, unsigned int *errorCode);
SceFontHandle sceFontOpenUserMemory(SceFontLibHandle libHandle, void *pMemoryFont, SceSize pMemoryFontSize, unsigned int *errorCode);
float sceFontPixelToPointH(SceFontLibHandle libHandle, float fontPixelsH, unsigned int *errorCode);
float sceFontPixelToPointV(SceFontLibHandle libHandle, float fontPixelsV, unsigned int *errorCode);
float sceFontPointToPixelH(SceFontLibHandle libHandle, float fontPointsH, unsigned int *errorCode);
float sceFontPointToPixelV(SceFontLibHandle libHandle, float fontPointsV, unsigned int *errorCode);
int sceFontSetAltCharacterCode(SceFontLibHandle libHandle, unsigned int charCode);
int sceFontSetResolution(SceFontLibHandle libHandle, float hRes, float vRes);
int scePhotoExportFromData(const void*data, SceSize size, const PhotoExportParam*param, void*workingMemory, void*cancelCb, void*user, char*outPath, SceSize outPathSize);
int scePhotoExportFromFile(const char*path, const PhotoExportParam*param, void*workingMemory, void*cancelCb, void*user, char*outPath, SceSize outPathSize);
int scePowerGetArmClockFrequency(void);
int scePowerGetBatteryCycleCount(void);
int scePowerGetBatteryFullCapacity(void);
int scePowerGetBatteryLifePercent(void);
int scePowerGetBatteryLifeTime(void);
int scePowerGetBatteryRemainCapacity(void);
int scePowerGetBatterySOH(void);
int scePowerGetBatteryTemp(void);
int scePowerGetBatteryVolt(void);
int scePowerGetBusClockFrequency(void);
int scePowerGetGpuClockFrequency(void);
int scePowerGetGpuXbarClockFrequency(void);
int scePowerGetUsingWireless(void);
SceBool scePowerIsBatteryCharging(void);
SceBool scePowerIsLowBattery(void);
SceBool scePowerIsPowerOnline(void);
SceBool scePowerIsSuspendRequired(void);
int scePowerRegisterCallback(SceUID cbid);
int scePowerRequestColdReset(void);
int scePowerRequestDisplayOff(void);
int scePowerRequestDisplayOn(void);
int scePowerRequestStandby(void);
int scePowerRequestSuspend(void);
int scePowerSetArmClockFrequency(int freq);
int scePowerSetBusClockFrequency(int freq);
int scePowerSetConfigurationMode(int conf);
int scePowerSetGpuClockFrequency(int freq);
int scePowerSetGpuXbarClockFrequency(int freq);
int scePowerSetUsingWireless(SceBool enabled);
int scePowerUnregisterCallback(SceUID cbid);
int sceKernelPowerLock(SceKernelPowerTickType type);
int sceKernelPowerTick(SceKernelPowerTickType type);
int sceKernelPowerUnlock(SceKernelPowerTickType type);
int scePromoterUtilityCheckExist(const char *titleid, int *res);
int scePromoterUtilityDeletePkg(const char *titleid);
int scePromoterUtilityExit(void);
int scePromoterUtilityGetResult(int *res);
int scePromoterUtilityGetState(int *state);
int scePromoterUtilityInit(void);
int scePromoterUtilityPromoteImport(const char *path);
int scePromoterUtilityPromotePkg(const char *path, int sync);
int scePromoterUtilityPromotePkgWithRif(const char *path, int sync);
int scePromoterUtilityUpdateLiveArea(ScePromoterUtilityLAUpdate *args);
int sceNetAdhocGetPdpStat(int *buflen, void *buf);
int sceNetAdhocGetPtpStat(int *buflen, void *buf);
int sceNetAdhocGetSocketAlert(int id, int *flag);
int sceNetAdhocInit(void);
int sceNetAdhocPdpCreate(const struct SceNetEtherAddr *saddr, SceUShort16 sport, unsigned int bufsize, int flag);
int sceNetAdhocPdpDelete(int id, int flag);
int sceNetAdhocPdpRecv(int id, struct SceNetEtherAddr *saddr, SceUShort16 *sport, void *buf, int *len, unsigned int timeout, int flag);
int sceNetAdhocPdpSend(int id, const struct SceNetEtherAddr *daddr, SceUShort16 dport, const void *data, int len, unsigned int timeout, int flag);
int sceNetAdhocPollSocket(struct SceNetAdhocPollSd *sds, int nsds, unsigned int timeout, int flag);
int sceNetAdhocPtpAccept(int id, struct SceNetEtherAddr *addr, SceUShort16 *port, unsigned int timeout, int flag);
int sceNetAdhocPtpClose(int id, int flag) ;
int sceNetAdhocPtpConnect(int id, unsigned int timeout, int flag);
int sceNetAdhocPtpFlush(int id, unsigned int timeout, int flag);
int sceNetAdhocPtpListen(const struct SceNetEtherAddr *saddr, SceUShort16 sport, unsigned int bufsize, unsigned int rexmt_int, int rexmt_cnt, int backlog, int flag);
int sceNetAdhocPtpOpen(const struct SceNetEtherAddr *saddr, SceUShort16 sport, const struct SceNetEtherAddr *daddr, SceUShort16 dport, unsigned int bufsize, unsigned int rexmt_int, int rexmt_cnt, int flag);
int sceNetAdhocPtpRecv(int id, void *buf, int *len, unsigned int timeout, int flag);
int sceNetAdhocPtpSend(int id, const void *data, int *len, unsigned int timeout, int flag);
int sceNetAdhocSetSocketAlert(int id, int flag);
int sceNetAdhocTerm(void);
int sceNetAdhocctlGetAddrByName(const struct SceNetAdhocctlNickname *nickname, int *buflen, void *buf);
int sceNetAdhocctlGetAdhocId(struct SceNetAdhocctlAdhocId *adhocId);
int sceNetAdhocctlGetEtherAddr(struct SceNetEtherAddr *addr);
int sceNetAdhocctlGetNameByAddr(const struct SceNetEtherAddr *addr, struct SceNetAdhocctlNickname *nickname);
int sceNetAdhocctlGetParameter(struct SceNetAdhocctlParameter *parameter);
int sceNetAdhocctlGetPeerInfo(const struct SceNetEtherAddr *addr, int size, struct SceNetAdhocctlPeerInfo *peerInfo);
int sceNetAdhocctlGetPeerList(int *buflen, void *buf);
int sceNetAdhocctlInit(const struct SceNetAdhocctlAdhocId *adhocId);
int sceNetAdhocctlTerm(void);
ScePvfError scePvfClose(ScePvfFontId fontID);
ScePvfError scePvfDoneLib(ScePvfLibId libID);
ScePvfFontIndex scePvfFindFont(ScePvfLibId libID, ScePvfFontStyleInfo *fontStyleInfo, ScePvfError *errorCode);
ScePvfFontIndex scePvfFindOptimumFont(ScePvfLibId libID, ScePvfFontStyleInfo *fontStyleInfo, ScePvfError *errorCode);
ScePvfError scePvfFlush(ScePvfFontId fontID);
ScePvfError scePvfGetCharGlyphImage(ScePvfFontId fontID, ScePvfCharCode charCode, ScePvfUserImageBufferRec *imageBuffer);
ScePvfError scePvfGetCharGlyphImage_Clip(ScePvfFontId fontID, ScePvfCharCode charCode, ScePvfUserImageBufferRec *imageBuffer, ScePvfS32 clipX, ScePvfS32 clipY, ScePvfU32 clipWidth, ScePvfU32 clipHeight);
ScePvfError scePvfGetCharImageRect(ScePvfFontId fontID, ScePvfCharCode charCode, ScePvfIrect *rect);
ScePvfError scePvfGetCharInfo(ScePvfFontId fontID, ScePvfCharCode charCode, ScePvfCharInfo *charInfo);
ScePvfError scePvfGetFontInfo(ScePvfFontId fontID, ScePvfFontInfo *fontInfo);
ScePvfError scePvfGetFontInfoByIndexNumber(ScePvfLibId libID, ScePvfFontStyleInfo *fontStyleInfo, ScePvfFontIndex fontIndex);
ScePvfError scePvfGetFontList(ScePvfLibId libID, ScePvfFontStyleInfo *fontStyleInfo, ScePvfInt arraySize);
ScePvfError scePvfGetKerningInfo(ScePvfFontId fontID, ScePvfCharCode leftCharCode, ScePvfCharCode rightCharCode, ScePvfKerningInfo *pKerningInfo);
ScePvfInt scePvfGetNumFontList(ScePvfLibId libID, ScePvfError *errorCode);
ScePvfBool scePvfIsElement(ScePvfFontId fontID, ScePvfCharCode charCode);
ScePvfLibId scePvfNewLib(ScePvfInitRec *initParam, ScePvfError *errorCode);
ScePvfFontId scePvfOpen(ScePvfLibId libID, ScePvfFontIndex fontIndex, ScePvfU32 mode, ScePvfError *errorCode);
ScePvfFontId scePvfOpenDefaultJapaneseFontOnSharedMemory(ScePvfLibId libID, ScePvfError *errorCode);
ScePvfFontId scePvfOpenDefaultLatinFontOnSharedMemory(ScePvfLibId libID, ScePvfError *errorCode);
ScePvfFontId scePvfOpenUserFile(ScePvfLibId libID, ScePvfPointer filename, ScePvfU32 mode, ScePvfError *errorCode);
ScePvfFontId scePvfOpenUserFileWithSubfontIndex(ScePvfLibId libID, ScePvfPointer filename, ScePvfU32 mode, ScePvfU32 subFontIndex, ScePvfError *errorCode);
ScePvfFontId scePvfOpenUserMemory(ScePvfLibId libID, ScePvfPointer addr, ScePvfU32 size, ScePvfError *errorCode);
ScePvfFontId scePvfOpenUserMemoryWithSubfontIndex(ScePvfLibId libID, ScePvfPointer addr, ScePvfU32 size, ScePvfU32 subFontIndex, ScePvfError *errorCode);
ScePvfFloat32 scePvfPixelToPointH(ScePvfLibId libID, ScePvfFloat32 pixel, ScePvfError *errorCode);
ScePvfFloat32 scePvfPixelToPointV(ScePvfLibId libID, ScePvfFloat32 pixel, ScePvfError *errorCode);
ScePvfFloat32 scePvfPointToPixelH(ScePvfLibId libID, ScePvfFloat32 point, ScePvfError *errorCode);
ScePvfFloat32 scePvfPointToPixelV(ScePvfLibId libID, ScePvfFloat32 point, ScePvfError *errorCode);
ScePvfError scePvfSetAltCharacterCode(ScePvfLibId libID, ScePvfCharCode charCode);
ScePvfError scePvfSetCharSize(ScePvfFontId fontID, ScePvfFloat32 hSize, ScePvfFloat32 vSize);
ScePvfError scePvfSetEM(ScePvfLibId libID, ScePvfFloat32 emValue);
ScePvfError scePvfSetEmboldenRate(ScePvfFontId fontID, ScePvfFloat32 emboldenRate);
ScePvfError scePvfSetResolution(ScePvfLibId libID, ScePvfFloat32 hResolution, ScePvfFloat32 vResolution);
ScePvfError scePvfSetSkewValue(ScePvfFontId fontID, ScePvfFloat32 angleX, ScePvfFloat32 angleY);
int sceRegMgrGetInitVals(const char*category, char*buf, const int elements_number);
int sceRegMgrGetKeyBin(const char *category, const char *name, void *buf, int size);
int sceRegMgrGetKeyInt(const char*category, const char*name, int*buf);
int sceRegMgrGetKeyStr(const char*category, const char*name, char*buf, const int size);
int sceRegMgrGetKeys(const char*category, char*buf, const int elements_number);
int sceRegMgrGetRegVersion(int version, char*buf);
int sceRegMgrSetKeyBin(const char *category, const char *name, void *buf, int size);
int sceRegMgrSetKeyInt(const char*category, const char*name, int buf);
int sceRegMgrSetKeyStr(const char*category, const char*name, char*buf, const int size);
int sceRegMgrSetKeys(const char*category, char*buf, const int elements_number);
int sceRegMgrSystemParamGetInt(const int id, int*buf);
int sceRegMgrSystemParamGetStr(const int id, char*buf, const int size);
int sceRtcCheckValid(const SceDateTime *time);
int sceRtcCompareTick(const SceRtcTick *pTick1, const SceRtcTick *pTick2);
int sceRtcConvertLocalTimeToUtc(const SceRtcTick *local_time, SceRtcTick *utc);
int sceRtcConvertUtcToLocalTime(const SceRtcTick *utc, SceRtcTick *local_time);
int sceRtcFormatRFC2822(char *pszDateTime, const SceRtcTick *utc, int iTimeZoneMinutes);
int sceRtcFormatRFC2822LocalTime(char *pszDateTime, const SceRtcTick *utc);
int sceRtcFormatRFC3339(char *pszDateTime, const SceRtcTick *utc, int iTimeZoneMinutes);
int sceRtcFormatRFC3339LocalTime(char *pszDateTime, const SceRtcTick *utc);
int sceRtcGetCurrentClock(SceDateTime *time, int time_zone);
int sceRtcGetCurrentClockLocalTime(SceDateTime *time);
int sceRtcGetCurrentNetworkTick(SceRtcTick *tick);
int sceRtcGetCurrentTick(SceRtcTick *tick);
int sceRtcGetDayOfWeek(int year, int month, int day);
int sceRtcGetDaysInMonth(int year, int month);
int sceRtcGetDosTime(const SceDateTime *time, unsigned int *puiDosTime);
int sceRtcGetTick(const SceDateTime *time, SceRtcTick *tick);
unsigned int sceRtcGetTickResolution(void);
int sceRtcGetTime64_t(const SceDateTime *time, SceUInt64 *pullTime);
int sceRtcGetTime_t(const SceDateTime *time, time_t *piTime);
int sceRtcGetWin32FileTime(const SceDateTime *time, SceUInt64 *ulWin32Time);
int sceRtcIsLeapYear(int year);
int sceRtcParseDateTime(SceRtcTick *utc, const char *pszDateTime);
int sceRtcParseRFC3339(SceRtcTick *utc, const char *pszDateTime);
int sceRtcSetDosTime(SceDateTime *time, unsigned int uiDosTime);
int sceRtcSetTick(SceDateTime *time, const SceRtcTick *tick);
int sceRtcSetTime64_t(SceDateTime *time, SceUInt64 ullTime);
int sceRtcSetTime_t(SceDateTime *time, time_t iTime);
int sceRtcSetWin32FileTime(SceDateTime *time, SceUInt64 ulWin32Time);
int sceRtcTickAddDays(SceRtcTick *pTick0, const SceRtcTick *pTick1, int lAdd);
int sceRtcTickAddHours(SceRtcTick *pTick0, const SceRtcTick *pTick1, int lAdd);
int sceRtcTickAddMicroseconds(SceRtcTick *pTick0, const SceRtcTick *pTick1, SceLong64 lAdd);
int sceRtcTickAddMinutes(SceRtcTick *pTick0, const SceRtcTick *pTick1, SceLong64 lAdd);
int sceRtcTickAddMonths(SceRtcTick *pTick0, const SceRtcTick *pTick1, int lAdd);
int sceRtcTickAddSeconds(SceRtcTick *pTick0, const SceRtcTick *pTick1, SceLong64 lAdd);
int sceRtcTickAddTicks(SceRtcTick *pTick0, const SceRtcTick *pTick1, SceLong64 lAdd);
int sceRtcTickAddWeeks(SceRtcTick *pTick0, const SceRtcTick *pTick1, int lAdd);
int sceRtcTickAddYears(SceRtcTick *pTick0, const SceRtcTick *pTick1, int lAdd);
int sceScreenShotDisable(void);
int sceScreenShotEnable(void);
int sceScreenShotSetOverlayImage(const char *filepath, int offsetX, int offsetY);
int sceScreenShotSetParam(const SceScreenShotParam *param);
int sceShellUtilInitEvents(int unk);
int sceShellUtilLock(SceShellUtilLockType type);
int sceShellUtilRegisterEventHandler(SceShellUtilEventHandler *handler, void *userData);
int sceShellUtilUnlock(SceShellUtilLockType type);
int sceShutterSoundPlay(uint32_t type);
int sceSqliteConfigMallocMethods(SceSqliteMallocMethods*methods);
int sceSslFreeSslCertName(SceSslCertName*certName);
SceSslCertName *sceSslGetIssuerName(SceSslCert *sslCert);
int sceSslGetMemoryPoolStats(SceSslMemoryPoolStats*currentStat);
int sceSslGetNameEntryCount(SceSslCertName *certName);
int sceSslGetNameEntryInfo(SceSslCertName *certName, int entryNum, char *oidname, unsigned maxOidnameLen, char *value, unsigned maxValueLen, unsigned *valueLen);
int sceSslGetNotAfter(SceSslCert *sslCert, SceRtcTick *limit);
int sceSslGetNotBefore(SceSslCert *sslCert, SceRtcTick *begin);
int sceSslGetSerialNumber(SceSslCert *sslCert, const char **sboData, unsigned *sboLen);
SceSslCertName *sceSslGetSubjectName(SceSslCert *sslCert);
int sceSslInit(unsigned poolSize);
int sceSslTerm(void);
SceUID sceKernelAllocMemBlock(const char *name, SceKernelMemBlockType type, int size, SceKernelAllocMemBlockOpt *optp);
SceUID sceKernelAllocMemBlockForVM(const char *name, SceSize size);
int sceKernelCloseMemBlock(SceUID uid);
int sceKernelCloseVMDomain(void);
SceUID sceKernelFindMemBlockByAddr(const void *addr, SceSize size);
int sceKernelFreeMemBlock(SceUID uid);
int sceKernelGetFreeMemorySize(SceKernelFreeMemorySizeInfo *info);
int sceKernelGetMemBlockBase(SceUID uid, void **basep);
int sceKernelGetMemBlockInfoByAddr(void *base, SceKernelMemBlockInfo *info);
int sceKernelGetMemBlockInfoByRange(void *base, SceSize size, SceKernelMemBlockInfo *info);
int sceKernelGetModel(void);
int sceKernelGetModelForCDialog(void);
int sceKernelIsPSVitaTV(void);
int sceKernelOpenMemBlock(const char *name, int flags);
int sceKernelOpenVMDomain(void);
int sceKernelSyncVMDomain(SceUID uid, void *data, SceSize size);
int sceSysmoduleIsLoaded(SceSysmoduleModuleId id);
int sceSysmoduleIsLoadedInternal(SceSysmoduleInternalModuleId id);
int sceSysmoduleLoadModule(SceSysmoduleModuleId id);
int sceSysmoduleLoadModuleInternal(SceSysmoduleInternalModuleId id);
int sceSysmoduleLoadModuleInternalWithArg(SceSysmoduleInternalModuleId id, SceSize args, void *argp, void *unk);
int sceSysmoduleUnloadModule(SceSysmoduleModuleId id);
int sceSysmoduleUnloadModuleInternal(SceSysmoduleInternalModuleId id);
int sceSysmoduleUnloadModuleInternalWithArg(SceSysmoduleInternalModuleId id, SceSize args, void *argp, void *unk);
int sceTouchDisableTouchForce(SceUInt32 port);
int sceTouchEnableTouchForce(SceUInt32 port);
int sceTouchGetPanelInfo(SceUInt32 port, SceTouchPanelInfo *pPanelInfo);
int sceTouchGetSamplingState(SceUInt32 port, SceTouchSamplingState *pState);
int sceTouchPeek(SceUInt32 port, SceTouchData *pData, SceUInt32 nBufs);
int sceTouchRead(SceUInt32 port, SceTouchData *pData, SceUInt32 nBufs);
int sceTouchSetSamplingState(SceUInt32 port, SceTouchSamplingState state);
int sceUdcdGetDeviceInfo(SceUdcdDeviceInfo *devInfo);
int sceUdcdGetDeviceState(SceUdcdDeviceState *state);
int sceUdcdGetDrvState(const char *driverName);
int sceUdcdRegisterCallback(SceUID cbid, int state);
int sceUdcdUnregisterCallback(SceUID cbid);
int sceUdcdWaitState(SceUdcdWaitParam *waitParam, unsigned int timeout);
int sceUsbSerialClose(void);
unsigned int sceUsbSerialGetRecvBufferSize(void);
unsigned int sceUsbSerialRecv(void *buffer, unsigned int max_len, int unk1, int unk2);
unsigned int sceUsbSerialSend(const void *buffer, unsigned int len, int unk1, int unk2);
int sceUsbSerialSetup(int unk);
int sceUsbSerialStart(void);
int sceUsbSerialStatus(void);
int sceUsbdAttach(SceUID uid, int, int, int);
int sceUsbdAttachCompositeLdd(SceUID, unsigned char unk[0x14]);
int sceUsbdClosePipe(SceUID uid, unsigned int device_id);
int sceUsbdEnd(SceUID uid);
int sceUsbdGetDescriptor(SceUID uid, unsigned int device_id, unsigned char *descriptor, unsigned int size);
int sceUsbdGetDescriptorSize(SceUID uid, unsigned int device_id);
int sceUsbdGetDeviceAddress(SceUID uid, unsigned int device_id, SceUsbdDeviceAddress *addr);
int sceUsbdGetDeviceList(SceUID uid, unsigned int num, SceUsbdDeviceInfo *info);
int sceUsbdGetDeviceSpeed(SceUID uid, unsigned int device_id, unsigned int *speed);
int sceUsbdGetIsochTransferStatus(SceUID uid, unsigned char buff[0x10]);
int sceUsbdGetTransferStatus(SceUID uid, unsigned char buff[0x10]);
int sceUsbdInit(SceUID *uid);
int sceUsbdIsochTransferData(SceUID uid, int unk, unsigned char buff[0x28]);
int sceUsbdOpenDefaultPipe(SceUID uid, unsigned int device_id);
int sceUsbdOpenPipe(SceUID uid, unsigned char unk[0x18]);
int sceUsbdReceiveEvent(SceUID uid, SceUsbdReceiveEvent *event);
int sceUsbdRegisterCallback(SceUID cbid, int);
int sceUsbdRegisterCompositeLdd(SceUID uid, const char str[0x100]);
int sceUsbdRegisterLdd(SceUID uid, const char str[0x100]);
int sceUsbdResetDevice(SceUID uid, unsigned int device_id);
int sceUsbdTransferData(SceUID uid, SceUsbdTransferData *data);
int sceUsbdUnregisterCallback(SceUID cbid);
int sceUsbdUnregisterLdd(SceUID uid, const char str[0x100]);
int sceUsbstorVStorSetDeviceInfo(const char *name, const char *version);
int sceUsbstorVStorSetImgFilePath(const char *path);
int sceUsbstorVStorStart(SceUsbstorVstorType type);
int sceUsbstorVStorStop(void);
int sceVideoExportFromFile(const VideoExportInputParam*in_param, int unk, void*workingMemory, void*cancelCb, void(*progress)(void*, int), void*user, int unk2, VideoExportOutputParam*out_param);
int sceAvcdecCreateDecoder(SceVideodecType codec, SceAvcdecCtrl *decoder, const SceAvcdecQueryDecoderInfo *query);
int sceAvcdecDecode(const SceAvcdecCtrl *decoder, const SceAvcdecAu *au, SceAvcdecArrayPicture *array_picture);
int sceAvcdecDeleteDecoder(SceAvcdecCtrl *decoder);
int sceAvcdecQueryDecoderMemSize(SceVideodecType codec, const SceAvcdecQueryDecoderInfo *query, SceAvcdecDecoderInfo *decoderInfo);
int sceVideodecInitLibrary(SceVideodecType codec, const SceVideodecQueryInitInfoHwAvcdec *initInfo);
int sceVideodecTermLibrary(SceVideodecType codec);
int _vshIoMount(int id, const char *path, int permission, void*buf);
int _vshSblAimgrGetConsoleId(char CID[32]);
int _vshSblGetSystemSwVersion(SceKernelFwInfo *data);
int vshIdStorageIsDirty(void);
int vshIdStorageIsFormatted(void);
int vshIdStorageIsReadOnly(void);
int vshIdStorageReadLeaf(int leafnum, void *buf, int buf_size);
int vshIdStorageWriteLeaf(int leafnum, const void *buf, int buf_size);
int vshIoUmount(int id, int unk1, int unk2, int unk3);
int vshMemoryCardGetCardInsertState(void);
int vshRemovableMemoryGetCardInsertState(void);
int vshSblAimgrIsCEX(void);
int vshSblAimgrIsDEX(void);
int vshSblAimgrIsDolce(void);
int vshSblAimgrIsGenuineDolce(void);
int vshSblAimgrIsGenuineVITA(void);
int vshSblAimgrIsTest(void);
int vshSblAimgrIsTool(void);
int vshSblAimgrIsVITA(void);
int vshSblSsIsDevelopmentMode(void);
int vshSysconHasWWAN(void);
int vshSysconIduModeClear(void);
int vshSysconIduModeSet(void);
int vshSysconIsDownLoaderMode(void);
int vshSysconIsIduMode(void);
int vshSysconIsMCEmuCapable(void);
int vshSysconIsShowMode(void);
int vshSysconShowModeClear(void);
int vshSysconShowModeSet(void);
